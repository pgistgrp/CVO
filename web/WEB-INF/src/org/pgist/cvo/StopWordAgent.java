package org.pgist.cvo;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.directwebremoting.WebContextFactory;
import org.pgist.util.PageSetting;


/**
 * DWR AJAX Agent class.<br>
 * Provide AJAX services to client programs.<br>
 * In this document, all the NON-AJAX methods are marked out. So all methods
 * <span style="color:red;">without</span> such a description
 * <span style="color:red;">ARE</span> AJAX service methods.<br>
 *
 * @author Jie Wu
 *
 */
public class StopWordAgent {


    private StopWordService stopWordService = null;


    /**
     * This is not an AJAX service method.
     *
     * @param stopWordService
     */
    public void setStopWordService(StopWordService stopWordService) {
        this.stopWordService = stopWordService;
    }


    /*
     * ------------------------------------------------------------------------
     */


    /**
     * Get the stop word list.
     * @param params A Map contains: <br>
     *         <ul>
     *           <li>page - int, the page number of current stopword list.</li>
     *           <li>count - int, the max count of stopwords displayed on a page.</li>
     *         </ul>
     * @return A Map contains: <br>
     *         <ul>
     *           <li>successful - a boolean value denoting if the operation succeeds</li>
     *           <li>html - a HTML source segment. (Generated by /WEB-INF/jsp/cvo/stopWords.jsp)<br>
     *                  The following variables are available for use in the jsp, stored in request:
     *                  <ul>
     *                    <li>stopWords - A list of StopWord object.</li> 
     *                    <li>setting - A PageSetting object</li>
     *                  </ul>
     *           </li>
     *           <li>reason - reason why operation failed (valid when successful==false)</li>
     *         </ul>
     */
    public Map getStopWords(HttpServletRequest request, Map params) {
        Map map = new HashMap();

        PageSetting setting = null;
        
        String s = (String) params.get("count");
        try {
            int count = Integer.parseInt(s);
            setting = new PageSetting(count);
        } catch (Exception e) {
            setting = new PageSetting(20);
        }

        s = (String) params.get("page");
        try {
            int page = Integer.parseInt(s);
            setting.setPage(page);
        } catch (Exception e) {
            e.printStackTrace();
            setting.setPage(1);
        }

        try {
            List stopWords = stopWordService.getStopWords(setting);
            request.setAttribute("stopWords", stopWords);
            request.setAttribute("setting", setting);
            map.put("html", WebContextFactory.get().forwardToString(
                    "/WEB-INF/jsp/cvo/stopWords.jsp"));
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("successful", false);
            map.put("reason", e.getMessage());
        }

        return map;
    }//getStopWords()


    /**
     * Create a stopWord in a JSP, stopWordService stores it into the database. No
     * duplicate allowed.
     * @param params A Map contains: <br>
     *         <ul>
     *           <li>name - String, the name of the stopword to be created.</li>
     *         </ul>
     * @return A Map contains: <br>
     *         <ul>
     *           <li>successful - a boolean value denoting if the operation succeeds</li>
     *           <li>reason - reason why operation failed (valid when successful==false)</li>
     *         </ul>
     */
    public Map createStopWord(Map params) {
        Map map = new HashMap();
        map.put("successful", false);

        String name = (String) params.get("name");
        if (name == null || "".equals(name.trim())) {
            map.put("reason", "StopWord name can not be empty.");
            return map;
        }

        try {
            StopWord stopWord = stopWordService.createStopWord(name);
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
        }

        return map;
    } //createStopWord()


    /**
     * Delete a stopWord whose ID is the value stored in params.
     * @param params A Map contains: <br>
     *         <ul>
     *           <li>id - int, the id of the stopword to be destroyed.</li>
     *         </ul>
     * @return A Map contains: <br>
     *         <ul>
     *           <li>successful - a boolean value denoting if the operation succeeds</li>
     *           <li>reason - reason why operation failed (valid when successful==false)</li>
     *         </ul>
     */
    public Map deleteStopWord(Map params) {
        Map map = new HashMap();
        map.put("successful", false);

        String s = (String) params.get("id");
        Long id = Long.parseLong(s);

        if (id < 1) {
            map.put("reason", "This concern is already deleted.");
            return map;
        }
        
        try {
            boolean isOutOfBoundary = stopWordService.deleteStopWord(id);
            if (!isOutOfBoundary) {
                map.put("reason", "The id you typed does not exist in the database.");
                return map;
            }
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
        }

        return map;
    }//deleteStopWord()
    
    
    /**
     * Search for stopwords which begin with the given string.
     * @param params A map contains:<br>
     *         <ul>
     *           <li>name - string, the name pattern to be searched.</li>
     *         </ul>
     * @return A Map contains: <br>
     *         <ul>
     *           <li>successful - a boolean value denoting if the operation succeeds</li>
     *           <li>stopWords - a list of StopWord objects.
     *           <li>reason - reason why operation failed (valid when successful==false)</li>
     *         </ul>
     */
    public Map searchStopWords(Map params) {
        Map map = new HashMap();
        map.put("successful", false);

        String name = (String) params.get("name");

        try {
            Collection stopWords = stopWordService.searchStopWord(name);
            if (stopWords==null) stopWords = new ArrayList();
            map.put("stopWords", stopWords);
            
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
        }

        return map;
    }//searchStopWords
    
    
    /**
     * Get the tag list.
     * @param params A Map contains: <br>
     *         <ul>
     *           <li>page - int, the page number of current tag list.</li>
     *           <li>count - int, the max count of tags displayed on a page.</li>
     *         </ul>
     * @return A Map contains: <br>
     *         <ul>
     *           <li>successful - a boolean value denoting if the operation succeeds</li>
     *           <li>html - a HTML source segment. (Generated by /WEB-INF/jsp/cvo/tags.jsp)<br>
     *                  The following variables are available for use in the jsp, stored in request:
     *                  <ul>
     *                    <li>tags - A list of Tag object.</li>
     *                    <li>setting - A PageSetting object</li>
     *                  </ul>
     *           </li>
     *           <li>reason - reason why operation failed (valid when successful==false)</li>
     *         </ul>
     */
    public Map getTags(HttpServletRequest request, Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        PageSetting setting = null;
        
        String s = (String) params.get("count");
        try {
            int count = Integer.parseInt(s);
            setting = new PageSetting(count);
        } catch (Exception e) {
            setting = new PageSetting(20);
        }

        s = (String) params.get("page");
        try {
            int page = Integer.parseInt(s);
            setting.setPage(page);
        } catch (Exception e) {
            e.printStackTrace();
            setting.setPage(1);
        }

        try {
            List tags = stopWordService.getTags(setting);
            request.setAttribute("tags", tags);
            request.setAttribute("setting", setting);
            map.put("html", WebContextFactory.get().forwardToString(
                    "/WEB-INF/jsp/cvo/tags.jsp"));
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("successful", false);
            map.put("reason", e.getMessage());
        }
        
        return map;
    }//getTags()
    
    
    /**
     * Create a new tag with the given name.
     * @param name - A Map contains: <br>
     *         <ul>
     *           <li>string, name of the new tag.</li>
     *         </ul>
     * @return A Map contains: <br>
     *         <ul>
     *           <li>successful - a boolean value denoting if the operation succeeds</li>
     *           <li>tag - the newly created Tag object</li>
     *           <li>reason - reason why operation failed (valid when successful==false)</li>
     *         </ul>
     */
    public Map createTag(Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        String name = (String) params.get("name");
        
        if (name==null || "".equals(name.trim())) {
            map.put("reason", "tag name can't be empty.");
            return map;
        }
        
        try {
            Tag tag = stopWordService.createTag(name);
            map.put("tag", tag);
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
        }
        
        return map;
    }//createTag()
    
    
    /**
     * Delete tag with the given tag id.
     * @param name - A Map contains: <br>
     *         <ul>
     *           <li>int, id of the tag to be deleted.</li>
     *         </ul>
     * @return A Map contains: <br>
     *         <ul>
     *           <li>successful - a boolean value denoting if the operation succeeds</li>
     *           <li>reason - reason why operation failed (valid when successful==false)</li>
     *         </ul>
     */
    public Map deleteTag(Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        try {
            Long id = new Long((String) params.get("id"));
            stopWordService.deleteTag(id);
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
        }
        
        return map;
    }//deleteTag
    

    /**
     * Search for tags which begin with the given string.
     * @param params A map contains:<br>
     *         <ul>
     *           <li>name - string, the name pattern to be searched.</li>
     *         </ul>
     * @return A Map contains: <br>
     *         <ul>
     *           <li>successful - a boolean value denoting if the operation succeeds</li>
     *           <li>tags - a list of Tag objects.
     *           <li>reason - reason why operation failed (valid when successful==false)</li>
     *         </ul>
     */
    public Map searchTags(Map params) {
        Map map = new HashMap();
        map.put("successful", false);

        String name = (String) params.get("name");

        try {
            Collection tags = stopWordService.searchTag(name);
            if (tags==null) tags = new ArrayList();
            map.put("tags", tags);
            
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
        }

        return map;
    }//searchStopWords
    
    
} //class StopWordAgent
