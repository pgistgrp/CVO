package org.pgist.sarp.cht;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.lucene.index.IndexReader;
import org.apache.lucene.search.Hits;
import org.apache.lucene.search.IndexSearcher;
import org.directwebremoting.WebContextFactory;
import org.pgist.sarp.cst.CSTService;
import org.pgist.sarp.cst.CategoryReference;
import org.pgist.search.SearchHelper;
import org.pgist.system.SystemService;
import org.pgist.system.YesNoVoting;
import org.pgist.users.User;
import org.pgist.util.PageSetting;
import org.pgist.util.WebUtils;


/**
 * DWR AJAX Agent class.<br>
 * Provide AJAX services to client programs.<br>
 * In this document, all the NON-AJAX methods are marked out. So all methods
 * <span style="color:red;">without</span> such a description
 * <span style="color:red;">ARE</span> AJAX service methods.<br>
 * 
 * @author kenny
 *
 */
public class CHTAgent {
    
    
    private CSTService cstService = null;
    
    private CHTService chtService = null;
    
    private SystemService systemService = null;
    
    private SearchHelper searchHelper;
    
    
    /**
     * This is not an AJAX service method.
     *
     * @param cstService
     */
    public void setCstService(CSTService cstService) {
        this.cstService = cstService;
    }


    /**
     * This is not an AJAX service method.
     *
     * @param chtService
     */
    public void setChtService(CHTService chtService) {
        this.chtService = chtService;
    }


    public void setSystemService(SystemService systemService) {
        this.systemService = systemService;
    }


    public void setSearchHelper(SearchHelper searchHelper) {
        this.searchHelper = searchHelper;
    }


    /*
     * ------------------------------------------------------------------------
     */


    /**
     * Get tags related with a given category.
     *
     * @param params A map contains:<br>
     *         <ul>
     *           <li>cstId - int, the current CST instance id</li>
     *           <li>userId - int, the id of a User object, optional, default is the current user</li>
     *           <li>categoryId - int, the id of a CategoryReference object</li>
     *           <li>page - int, the page to be displayed of related tags (for type==0) or unrelated tags (for type==1)</li>
     *           <li>count - int, number of tag related (for type==0) or unrelated (for type==1) to be displayed on a page, -1 denotes all</li>
     *         </ul>
     *         
     * @return A map contains:<br>
     *         <ul>
     *           <li>successful - a boolean value denoting if the operation succeeds</li>
     *           <li>catRef - a CategoryReference object (valid when successful==false)</li>
     *           <li>tags - A list of related TagReference objects (only for type==1)</li>
     *           <li>html - a HTML source segment for related tags. (valid when successful==true)<br>
     *                  for type==0, it's generated by /WEB-INF/jsp/cvo/cstTags0.jsp,<br>
     *                  the following variables are available for use in jsp page:
     *                  <ul>
     *                    <li>user - A User object</li>
     *                    <li>cht - A CHT object</li>
     *                    <li>catRef - A CategoryReference object</li>
     *                    <li>tags - A list of related TagReference objects</li>
     *                    <li>setting - A PageSetting object</li>
     *                  </ul>
     *           </li>
     *           <li>reason - reason why operation failed (valid when successful==false)</li>
     *         </ul>
     */
    public Map getTags(HttpServletRequest request, Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long userId = null;
        try {
            userId = new Long((String) params.get("userId"));
        } catch (Exception e) {
        }
        
        if (userId==null) userId = WebUtils.currentUserId();
        
        Long chtId = new Long((String) params.get("chtId"));
        try {
            User user = systemService.getUserById(userId);
            request.setAttribute("user", user);
            
            CHT cht = chtService.getCHTById(chtId);
            if (cht==null) {
                map.put("reason", "no such cht!");
                return map;
            }
            
            Long categoryId = new Long( (String) params.get("categoryId") );
            
            CategoryReference ref = cstService.getCategoryReferenceById(categoryId);
            if (ref==null) {
                map.put("reason", "CategoryReference doesn't exist.");
                return map;
            }
            
            PageSetting setting = new PageSetting();
            
            try {
                setting.setRowOfPage(Integer.parseInt((String) params.get("count")));
            } catch (Exception e) {
                setting.setRowOfPage(-1);
            }
            
            try {
                setting.setPage(Integer.parseInt((String) params.get("page")));
            } catch (Exception e) {
                setting.setPage(1);
            }
            
            Collection tags = null;
            
            tags = chtService.getRealtedTags(chtId, categoryId, setting);
            map.put("tags", tags);
            
            request.setAttribute("cht", cht);
            request.setAttribute("catRef", ref);
            request.setAttribute("tags", tags);
            request.setAttribute("setting", setting);
            
            map.put("html", WebContextFactory.get().forwardToString("/WEB-INF/jsp/sarp/cht/chtTags0.jsp"));
            map.put("catRef", ref);
            map.put("successful", true);
        } catch(Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
        }
        
        return map;
    }//getTags()
    
    
    /**
     * Get tags related with a given category.
     *
     * @param params A map contains:<br>
     *         <ul>
     *           <li>chtId - int, the current CHT instance id</li>
     *           <li>categoryId - int, the id of a CategoryReference object</li>
     *         </ul>
     *         
     * @return A map contains:<br>
     *         <ul>
     *           <li>successful - a boolean value denoting if the operation succeeds</li>
     *           <li>reason - reason why operation failed (valid when successful==false)</li>
     *           <li>tags - A list of related TagReference objects</li>
     *         </ul>
     */
    public Map getRTags(HttpServletRequest request, Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long chtId = new Long((String) params.get("chtId"));
        try {
            CHT cht = chtService.getCHTById(chtId);
            if (cht==null) {
                map.put("reason", "no such cht!");
                return map;
            }
            
            Long categoryId = new Long( (String) params.get("categoryId") );
            
            CategoryReference ref = cstService.getCategoryReferenceById(categoryId);
            if (ref==null) {
                map.put("reason", "CategoryReference doesn't exist.");
                return map;
            }
            
            map.put("catRef", ref);
            map.put("tags", ref.getTags());
            map.put("successful", true);
        } catch(Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
        }
        
        return map;
    }//getRTags()
    
    
    /**
     * Get CHT comments for the given CategoryReference id.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>catRefId - int, id of a CategoryReference object</li>
     *     <li>page - int, page number of the requestd page of comments</li>
     *   </ul>
     * 
     * @param wfinfo A map contains:
     *   <ul>
     *   <li>workflowId - long</li>
     *   <li>contextId - long</li>
     *   <li>activityId - long</li>
     * </ul>
     * 
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *     <li>html - a HTML source segment. (Generated by /WEB-INF/jsp/sarp/cht/chtComments.jsp)<br>
     *           The following variables are available for use in the jsp:
     *           <ul>
     *             <li>comments - A list of Comment objects</li>
     *             <li>setting - A PageSetting objects</li>
     *           </ul>
     *     </li>
     *     <li>page - page number of the returned page</li>
     *   </ul>
     */
    public Map getComments(HttpServletRequest request, Map params, Map wfinfo) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long catRefId = null;
        try {
            request.setAttribute("wfinfo", wfinfo);
            
            catRefId = new Long((String) params.get("catRefId"));
            if (catRefId==null) {
                map.put("reason", "can't find this CategoryReference");
                return map;
            }
        } catch (Exception e) {
            map.put("reason", "can't find this CategoryReference");
            return map;
        }
        
        try {
            PageSetting setting = new PageSetting(10);
            setting.setPage((String) params.get("page"));
            
            Collection<CHTComment> comments = chtService.getComments(catRefId, setting);
            
            request.setAttribute("comments", comments);
            request.setAttribute("setting", setting);
            
            map.put("html", WebContextFactory.get().forwardToString("/WEB-INF/jsp/sarp/cht/chtComments.jsp"));
            map.put("page", setting.getPage());
            map.put("successful", true);
            
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//getComments()
    
    
    /**
     * Create a CHT comment for the given CategoryReference id.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>catRefId - int, id of a CategoryReference object</li>
     *     <li>title - string, comment title</li>
     *     <li>content - string, comment content</li>
     *   </ul>
     * 
     * @param wfinfo A map contains:
     *   <ul>
     *   <li>workflowId - long</li>
     *   <li>contextId - long</li>
     *   <li>activityId - long</li>
     * </ul>
     * 
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *   </ul>
     */
    public Map createComment(HttpServletRequest request, Map params, Map wfinfo) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long catRefId = null;
        try {
            request.setAttribute("wfinfo", wfinfo);
            
            catRefId = new Long((String) params.get("catRefId"));
            if (catRefId==null) {
                map.put("reason", "can't find this CategoryReference");
                return map;
            }
        } catch (Exception e) {
            map.put("reason", "can't find this CategoryReference");
            return map;
        }
        
        try {
            String title = (String) params.get("title");
            String content = (String) params.get("content");
            
            if (title.length()>100) throw new Exception("title can't exceeds 100 chars");
            if (content.length()>8192) throw new Exception("content can't exceeds 8192 chars");
            
            CHTComment comment = chtService.createComment(new Long((String) wfinfo.get("workflowId")), catRefId, title, content, false);
            
            map.put("successful", true);
            
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//createComment()
    
    
    /**
     * Delete the given Comment object. Only used by moderator.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>cid - int, id of the Comment object</li>
     *   </ul>
     *   
     * @param wfinfo A map contains:
     *   <ul>
     *   <li>workflowId - long</li>
     *   <li>contextId - long</li>
     *   <li>activityId - long</li>
     * </ul>
     * 
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *   </ul>
     */
    public Map deleteComment(Map params, Map wfinfo) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long cid = null;
        CHTComment comment = null;
        
        try {
            cid = new Long((String) params.get("cid"));
            if (cid==null) {
                map.put("reason", "no such Comment object");
                return map;
            }
            
            comment = chtService.getCommentById(cid);
            if (comment==null) {
                map.put("reason", "no such Comment object");
                return map;
            }
            
            //check if it's moderator, TODO
            if (comment.getAuthor().getId().equals(WebUtils.currentUserId())) {
                chtService.deleteComment(comment);
                
                /*
                 * delete from lucene
                 */
                IndexSearcher searcher = null;
                IndexReader reader = null;
                try {
                    searcher = searchHelper.getIndexSearcher();
                    
                    Hits hits = searcher.search(searchHelper.getParser().parse(
                        "workflowid:"+wfinfo.get("workflowId")
                       +" AND type:infoobjcomment AND commentid:"+cid
                    ));
                    
                    if (hits.length()>0) {
                        reader = searchHelper.getIndexReader();
                        reader.deleteDocument(hits.id(0));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    if (searcher!=null) searcher.close();
                    if (reader!=null) reader.close();
                }
            } else {
                map.put("reason", "You are not the owner of this comment");
                return map;
            }
            
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//deleteComment()
    
    
    /**
     * Set the voting choice on the given CHTComment.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>cid - int, id of the CHTComment object. Required.</li>
     *     <li>agree - string, "true" or "false". Whether or not the current user agree with the current object.</li>
     *   </ul>
     *   
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *     <li>numAgree - int</li>
     *     <li>numVote - int</li>
     *   </ul>
     */
    public Map setVotingOnComment(Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long cid = null;
        try {
            cid = new Long((String) params.get("cid"));
        } catch (Exception e) {
            map.put("reason", "catRefId is required.");
            return map;
        }
        
        boolean agree = "true".equalsIgnoreCase((String) params.get("agree"));
        
        try {
            CHTComment comment = null;
            
            YesNoVoting voting = systemService.getVoting(YesNoVoting.TYPE_SARP_CHT_COMMENT, cid);
            if (voting!=null) {
                comment = chtService.getCommentById(cid);
            } else {
                comment = chtService.setVotingOnComment(cid, agree);
            }
            
            map.put("numAgree", comment.getNumAgree());
            map.put("numVote", comment.getNumVote());
            map.put("voted", true);
            
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//setVotingOnComment()
    
    
    /**
     * Publish my CHT category.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>chtId - int, id of the CHT object. Required.</li>
     *   </ul>
     *   
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *   </ul>
     */
    public Map publish(Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long chtId = null;
        try {
            chtId = new Long((String) params.get("chtId"));
        } catch (Exception e) {
            map.put("reason", "chtId is required.");
            return map;
        }
        
        try {
            chtService.publish(chtId);
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//publish()
    
    
    /**
     * 
     * @param params A map contains:<br>
     *         <ul>
     *           <li>chtId - int, a CHT instance id</li>
     *         </ul>
     *         
     * @return A map contains:<br>
     *         <ul>
     *           <li>successful - a boolean value denoting if the operation succeeds</li>
     *           <li>reason - reason why operation failed (valid when successful==false)</li>
     *           <li>winnerUser - the User object</li>
     *           <li>winnerCategory - the CategoryReference</li>
     *         </ul>
     */
    public Map getWinner(HttpServletRequest request, Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        try {
            Long chtId = new Long( (String) params.get("chtId") );
            
            CHT cht = chtService.getCHTById(chtId);
            
            map.put("winnerUser", cht.getWinner());
            map.put("winnerCategory", cht.getWinnerCategory());
            
            map.put("successful", true);
        } catch(Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
        }
        
        return map;
    }//getWinner()
    
    
    /**
     * 
     * @param params A map contains:<br>
     *         <ul>
     *           <li>catRefId - int, a CategoryReference instance id</li>
     *         </ul>
     *         
     * @return A map contains:<br>
     *         <ul>
     *           <li>successful - a boolean value denoting if the operation succeeds</li>
     *           <li>reason - reason why operation failed (valid when successful==false)</li>
     *           <li>navigation - int[6] of 0 or 1</li>
     *         </ul>
     */
    public Map getNavigation(HttpServletRequest request, Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        try {
            int[] navigation = new int[] { 0, 0, 0, 0, 1, 0 };
            map.put("navigation", navigation);
            
            Long catRefId = null;
            
            try {
                catRefId = new Long( (String) params.get("catRefId") );
            } catch (Exception e) {
                map.put("successful", true);
                return map;
            }
            
            CategoryReference catRef = chtService.getCategoryReferenceById(catRefId);
            
            if (catRef!=null) {
                if ("root-ignore".equals(catRef.getParents().iterator().next().getCategory().getName())) {
                    // ignore
                    navigation[4] = 0;
                    navigation[5] = 1;
                } else {
                    CategoryReference parent = catRef.getParents().iterator().next();
                    CategoryReference grandpa = null;
                    if (parent.getParents().size()>0) {
                        grandpa = parent.getParents().iterator().next();
                        navigation[4] = 0;
                        navigation[5] = 0;
                    }
                    
                    int index = parent.getChildren().indexOf(catRef);
                    if (index>0) {
                        //can move up
                        navigation[0] = 1;
                        //can move right
                        navigation[3] = 1;
                    }
                    //can move down
                    if (index<parent.getChildren().size()-1) navigation[1] = 1;
                    //can move left
                    if (grandpa!=null) navigation[2] = 1;
                }
            }
            
            map.put("successful", true);
        } catch(Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
        }
        
        return map;
    }//getNavigation()
    
    
    /**
     * 
     * @param params A map contains:<br>
     *         <ul>
     *           <li>chtId - int, a CHT instance id</li>
     *           <li>catRefId - int, a CategoryReference instance id</li>
     *           <li>direction - int, 0 : up, 1 : down, 2 : left, 3 : right</li>
     *         </ul>
     *         
     * @return A map contains:<br>
     *         <ul>
     *           <li>successful - a boolean value denoting if the operation succeeds</li>
     *           <li>reason - reason why operation failed (valid when successful==false)</li>
     *           <li>html - string</li>
     *         </ul>
     */
    public Map moveCategoryReference(HttpServletRequest request, Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        try {
            Long chtId = null;
            Long catRefId = null;
            
            try {
                chtId = new Long( (String) params.get("chtId") );
            } catch (Exception e) {
                e.printStackTrace();
                map.put("reason", "can't find the specified CHT");
                return map;
            }
            
            try {
                catRefId = new Long( (String) params.get("catRefId") );
            } catch (Exception e) {
                e.printStackTrace();
                map.put("reason", "can't find the specified category");
                return map;
            }
            
            CHT cht = chtService.getCHTById(chtId);
            CategoryReference catRef = chtService.getCategoryReferenceById(catRefId);
            
            if (cht==null) {
                map.put("reason", "can't find the specified CHT");
                return map;
            }
            
            if (catRef==null) {
                map.put("reason", "can't find the specified category");
                return map;
            }
            
            int direction = Integer.parseInt((String) params.get("direction"));
            if (direction<0 || direction>5) {
                map.put("reason", "unknown direction");
                return map;
            }
            
            request.setAttribute("root", chtService.moveCategoryReference(cht, catRefId, direction));
            request.setAttribute("ignoreRoot", cht.getIgnores().get(WebUtils.currentUserId()));
            map.put("html", WebContextFactory.get().forwardToString("/WEB-INF/jsp/sarp/cht/chtCatsTable.jsp"));
            
            map.put("successful", true);
        } catch(Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
        }
        
        return map;
    }//moveCategoryReference()
    
    
    /**
     * Set the voting choice on the given CategoryPath.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>pathId - int, id of the CategoryPath object. Required.</li>
     *     <li>agree - string, "true" or "false". Whether or not the current user agree with the current object.</li>
     *   </ul>
     *   
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *     <li>numAgree - int</li>
     *     <li>numVote - int</li>
     *   </ul>
     */
    public Map setVotingOnPath(Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long pathId = null;
        try {
            pathId = new Long((String) params.get("pathId"));
        } catch (Exception e) {
            map.put("reason", "pathId is required.");
            return map;
        }
        
        boolean agree = "true".equalsIgnoreCase((String) params.get("agree"));
        
        try {
            CategoryPath path = null;
            
            YesNoVoting voting = systemService.getVoting(YesNoVoting.TYPE_SARP_CHT_PATH, pathId);
            if (voting!=null) {
                path = chtService.getPathById(pathId);
            } else {
                path = chtService.setVotingOnPath(pathId, agree);
            }
            
            map.put("numAgree", path.getNumAgree());
            map.put("numVote", path.getNumVote());
            map.put("voted", true);
            
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//setVotingOnPath()
    
    
    /**
     * Add a new CategoryPath.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>chtId - int, id of the CHT object. Required.</li>
     *     <li>pathId - int, id of the CategoryPath object. Required.</li>
     *   </ul>
     *   
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *   </ul>
     */
    public Map addPath(HttpServletRequest request, Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        String pathIds = (String) params.get("ids");        
        Long chtId = new Long((String) params.get("chtId"));
        
        try {
            CategoryPath path = chtService.createPath(chtId, pathIds);
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    } //addPath()
    
    
    /**
     * Add all CategoryPath paths.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>chtId - int, id of the CHT object. Required.</li>
     *   </ul>
     *   
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *   </ul>
     */
    public Map getPaths(HttpServletRequest request, Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long chtId = new Long((String) params.get("chtId"));
        
        try {
            CHT cht = chtService.getCHTById(chtId);
            
            request.setAttribute("cht", cht);
            map.put("html", WebContextFactory.get().forwardToString("/WEB-INF/jsp/sarp/cht/chtPaths.jsp"));
            
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    } //getPaths()
    
    
}//class CHTAgent
