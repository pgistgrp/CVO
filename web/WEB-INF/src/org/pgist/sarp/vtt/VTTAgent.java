package org.pgist.sarp.vtt;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.lucene.index.IndexReader;
import org.apache.lucene.search.Hits;
import org.apache.lucene.search.IndexSearcher;
import org.directwebremoting.WebContextFactory;
import org.pgist.sarp.cht.CHTService;
import org.pgist.sarp.cst.CategoryReference;
import org.pgist.search.SearchHelper;
import org.pgist.system.SystemService;
import org.pgist.system.YesNoVoting;
import org.pgist.util.PageSetting;
import org.pgist.util.WebUtils;


/**
 * DWR AJAX Agent class.<br>
 * Provide AJAX services to client programs.<br>
 * In this document, all the NON-AJAX methods are marked out. So all methods
 * <span style="color:red;">without</span> such a description
 * <span style="color:red;">ARE</span> AJAX service methods.<br>
 * 
 * @author kenny
 *
 */
public class VTTAgent {
    
    
    private CHTService chtService = null;
    
    private VTTService vttService = null;
    
    private SystemService systemService = null;
    
    private SearchHelper searchHelper;
    
    
    /**
     * This is not an AJAX service method.
     *
     * @param vttService
     */
    public void setVttService(VTTService vttService) {
        this.vttService = vttService;
    }


    /**
     * This is not an AJAX service method.
     *
     * @param chtService
     */
    public void setChtService(org.pgist.sarp.cht.CHTService chtService) {
        this.chtService = chtService;
    }


    public void setSystemService(SystemService systemService) {
        this.systemService = systemService;
    }


    public void setSearchHelper(SearchHelper searchHelper) {
        this.searchHelper = searchHelper;
    }


    /*
     * ------------------------------------------------------------------------
     */


    /**
     * Get VTT comments for the given CategoryReference id.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>catRefId - int, id of a CategoryReference object</li>
     *     <li>page - int, page number of the requestd page of comments</li>
     *   </ul>
     * 
     * @param wfinfo A map contains:
     *   <ul>
     *   <li>workflowId - long</li>
     *   <li>contextId - long</li>
     *   <li>activityId - long</li>
     * </ul>
     * 
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *     <li>html - a HTML source segment. (Generated by /WEB-INF/jsp/sarp/vtt/vttComments.jsp)<br>
     *           The following variables are available for use in the jsp:
     *           <ul>
     *             <li>comments - A list of Comment objects</li>
     *             <li>setting - A PageSetting objects</li>
     *           </ul>
     *     </li>
     *     <li>page - page number of the returned page</li>
     *   </ul>
     */
    public Map getComments(HttpServletRequest request, Map params, Map wfinfo) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long catRefId = null;
        try {
            request.setAttribute("wfinfo", wfinfo);
            
            catRefId = new Long((String) params.get("catRefId"));
            if (catRefId==null) {
                map.put("reason", "can't find this CategoryReference");
                return map;
            }
        } catch (Exception e) {
            map.put("reason", "can't find this CategoryReference");
            return map;
        }
        
        try {
            PageSetting setting = new PageSetting(10);
            setting.setPage((String) params.get("page"));
            
            Collection<VTTComment> comments = vttService.getComments(catRefId, setting);
            
            request.setAttribute("comments", comments);
            request.setAttribute("setting", setting);
            
            map.put("html", WebContextFactory.get().forwardToString("/WEB-INF/jsp/sarp/vtt/vttComments.jsp"));
            map.put("page", setting.getPage());
            map.put("successful", true);
            
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//getComments()
    
    
    /**
     * Create a VTT comment for the given CategoryReference id.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>catRefId - int, id of a CategoryReference object</li>
     *     <li>title - string, comment title</li>
     *     <li>content - string, comment content</li>
     *   </ul>
     * 
     * @param wfinfo A map contains:
     *   <ul>
     *   <li>workflowId - long</li>
     *   <li>contextId - long</li>
     *   <li>activityId - long</li>
     * </ul>
     * 
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *   </ul>
     */
    public Map createComment(HttpServletRequest request, Map params, Map wfinfo) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long catRefId = null;
        try {
            request.setAttribute("wfinfo", wfinfo);
            
            catRefId = new Long((String) params.get("catRefId"));
            if (catRefId==null) {
                map.put("reason", "can't find this CategoryReference");
                return map;
            }
        } catch (Exception e) {
            map.put("reason", "can't find this CategoryReference");
            return map;
        }
        
        try {
            String title = (String) params.get("title");
            String content = (String) params.get("content");
            
            if (title.length()>100) throw new Exception("title can't exceeds 100 chars");
            if (content.length()>8192) throw new Exception("content can't exceeds 8192 chars");
            
            VTTComment comment = vttService.createComment(catRefId, title, content, false);
            
            map.put("successful", true);
            
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//createComment()
    
    
    /**
     * Delete the given Comment object. Only used by moderator.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>cid - int, id of the Comment object</li>
     *   </ul>
     *   
     * @param wfinfo A map contains:
     *   <ul>
     *   <li>workflowId - long</li>
     *   <li>contextId - long</li>
     *   <li>activityId - long</li>
     * </ul>
     * 
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *   </ul>
     */
    public Map deleteComment(Map params, Map wfinfo) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long cid = null;
        VTTComment comment = null;
        
        try {
            cid = new Long((String) params.get("cid"));
            if (cid==null) {
                map.put("reason", "no such Comment object");
                return map;
            }
            
            comment = vttService.getCommentById(cid);
            if (comment==null) {
                map.put("reason", "no such Comment object");
                return map;
            }
            
            //check if it's moderator, TODO
            if (comment.getAuthor().getId().equals(WebUtils.currentUserId())) {
                vttService.deleteComment(comment);
                
                /*
                 * delete from lucene
                 */
                IndexSearcher searcher = null;
                IndexReader reader = null;
                try {
                    searcher = searchHelper.getIndexSearcher();
                    
                    Hits hits = searcher.search(searchHelper.getParser().parse(
                        "workflowid:"+wfinfo.get("workflowId")
                       +" AND type:infoobjcomment AND commentid:"+cid
                    ));
                    
                    if (hits.length()>0) {
                        reader = searchHelper.getIndexReader();
                        reader.deleteDocument(hits.id(0));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    if (searcher!=null) searcher.close();
                    if (reader!=null) reader.close();
                }
            } else {
                map.put("reason", "You are not the owner of this comment");
                return map;
            }
            
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//deleteComment()
    
    
    /**
     * Set the voting choice on the given CHTComment.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>cid - int, id of the CHTComment object. Required.</li>
     *     <li>agree - string, "true" or "false". Whether or not the current user agree with the current object.</li>
     *   </ul>
     *   
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *     <li>numAgree - int</li>
     *     <li>numVote - int</li>
     *   </ul>
     */
    public Map setVotingOnComment(Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long cid = null;
        try {
            cid = new Long((String) params.get("cid"));
        } catch (Exception e) {
            map.put("reason", "catRefId is required.");
            return map;
        }
        
        boolean agree = "true".equalsIgnoreCase((String) params.get("agree"));
        
        try {
            VTTComment comment = null;
            
            YesNoVoting voting = systemService.getVoting(YesNoVoting.TYPE_SARP_VTT_COMMENT, cid);
            if (voting!=null) {
                comment = vttService.getCommentById(cid);
            } else {
                comment = vttService.setVotingOnComment(cid, agree);
            }
            
            map.put("numAgree", comment.getNumAgree());
            map.put("numVote", comment.getNumVote());
            map.put("voted", true);
            
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//setVotingOnComment()
    
    
    /**
     * Get CategoryValue for the given CategoryReference id.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>catRefId - int, id of a CategoryReference object</li>
     *   </ul>
     * 
     * @param wfinfo A map contains:
     *   <ul>
     *   <li>workflowId - long</li>
     *   <li>contextId - long</li>
     *   <li>activityId - long</li>
     * </ul>
     * 
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *     <li>html - a HTML source segment. (Generated by /WEB-INF/jsp/sarp/vtt/vttCategoryValue.jsp)<br>
     *           The following variables are available for use in the jsp:
     *           <ul>
     *             <li>value - A CategoryValue objects</li>
     *           </ul>
     *     </li>
     *     <li>page - page number of the returned page</li>
     *   </ul>
     */
    public Map getCategoryValue(HttpServletRequest request, Map params, Map wfinfo) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long catRefId = null;
        try {
            request.setAttribute("wfinfo", wfinfo);
            
            catRefId = new Long((String) params.get("catRefId"));
            if (catRefId==null) {
                map.put("reason", "can't find this CategoryReference");
                return map;
            }
        } catch (Exception e) {
            map.put("reason", "can't find this CategoryReference");
            return map;
        }
        
        try {
            CategoryValue value = vttService.getCategoryValueById(catRefId);
            
            request.setAttribute("value", value);
            
            map.put("html", WebContextFactory.get().forwardToString("/WEB-INF/jsp/sarp/vtt/vttCategoryValue.jsp"));
            map.put("successful", true);
            
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//getCategoryValue()
    
    
    /**
     * Save CategoryValue for the given CategoryReference id.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>catRefId - int, id of a CategoryReference object</li>
     *     <li>name - string</li>
     *     <li>value - boolean</li>
     *     <li>unit - string</li>
     *   </ul>
     * 
     * @param wfinfo A map contains:
     *   <ul>
     *   <li>workflowId - long</li>
     *   <li>contextId - long</li>
     *   <li>activityId - long</li>
     * </ul>
     * 
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *     <li>html - a HTML source segment. (Generated by /WEB-INF/jsp/sarp/vtt/vttValueTree.jsp)<br>
     *           The following variables are available for use in the jsp:
     *           <ul>
     *             <li>value - A CategoryValue objects</li>
     *           </ul>
     *     </li>
     *     <li>page - page number of the returned page</li>
     *   </ul>
     */
    public Map saveCategoryValue(HttpServletRequest request, Map params, Map wfinfo) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long catRefId = null;
        try {
            request.setAttribute("wfinfo", wfinfo);
            
            catRefId = new Long((String) params.get("catRefId"));
            if (catRefId==null) {
                map.put("reason", "can't find this CategoryReference");
                return map;
            }
        } catch (Exception e) {
            map.put("reason", "can't find this CategoryReference");
            return map;
        }
        
        String name = (String) params.get("name");
        String value = (String) params.get("value");
        String unit = (String) params.get("unit");
        
        if ("true".equals(value)) {
            if (name==null || name.length()==0) {
                map.put("reason", "please input measurement");
                return map;
            } else if (unit==null || unit.length()==0) {
                map.put("reason", "please input unit of measurement");
                return map;
            }
        } else {
            //discard name and unit
            name = "";
            unit = "";
        }
        
        try {
            vttService.saveCategoryValue(catRefId, name, unit);
            
            CategoryValue catValue = vttService.getCategoryValueById(catRefId);
            request.setAttribute("value", catValue);
            
            CategoryReference root = getRoot(catValue);
            
            request.setAttribute("root", root);
            map.put("html", WebContextFactory.get().forwardToString("/WEB-INF/jsp/sarp/vtt/vttValueTree.jsp"));
            map.put("successful", true);
            
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    } //saveCategoryValue()


    private CategoryReference getRoot(CategoryValue catValue) {
        CategoryReference root = catValue.getCatRef();
        while (root.getParents().size()>0) {
            root = root.getParents().iterator().next();
        }
        return root;
    } //getRoot()
    
    
    /**
     * Publish my VTT category.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>vttId - int, id of the VTT object. Required.</li>
     *   </ul>
     *   
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *   </ul>
     */
    public Map publish(Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long vttId = null;
        try {
            vttId = new Long((String) params.get("vttId"));
        } catch (Exception e) {
            map.put("reason", "chtId is required.");
            return map;
        }
        
        try {
            vttService.publish(vttId);
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//publish()
    
    
}//class VTTAgent
