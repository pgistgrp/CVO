package org.pgist.sarp.vtt;

import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;

import javax.servlet.http.HttpServletRequest;

import org.apache.lucene.index.IndexReader;
import org.apache.lucene.search.Hits;
import org.apache.lucene.search.IndexSearcher;
import org.directwebremoting.WebContextFactory;
import org.pgist.sarp.bct.TagReference;
import org.pgist.sarp.cht.CHTService;
import org.pgist.sarp.cht.CategoryPath;
import org.pgist.sarp.cst.CategoryReference;
import org.pgist.search.SearchHelper;
import org.pgist.system.EmailSender;
import org.pgist.system.SystemService;
import org.pgist.system.YesNoVoting;
import org.pgist.users.User;
import org.pgist.util.PageSetting;
import org.pgist.util.WebUtils;


/**
 * DWR AJAX Agent class.<br>
 * Provide AJAX services to client programs.<br>
 * In this document, all the NON-AJAX methods are marked out. So all methods
 * <span style="color:red;">without</span> such a description
 * <span style="color:red;">ARE</span> AJAX service methods.<br>
 * 
 * @author kenny
 *
 */
public class VTTAgent {
    
    
    private CHTService chtService = null;
    
    private VTTService vttService = null;
    
    private SystemService systemService = null;
    
    private SearchHelper searchHelper;
    
    private EmailSender emailSender;
    
    
    public void setEmailSender(EmailSender emailSender) {
        this.emailSender = emailSender;
    }


    /**
     * This is not an AJAX service method.
     *
     * @param vttService
     */
    public void setVttService(VTTService vttService) {
        this.vttService = vttService;
    }


    /**
     * This is not an AJAX service method.
     *
     * @param chtService
     */
    public void setChtService(org.pgist.sarp.cht.CHTService chtService) {
        this.chtService = chtService;
    }


    public void setSystemService(SystemService systemService) {
        this.systemService = systemService;
    }


    public void setSearchHelper(SearchHelper searchHelper) {
        this.searchHelper = searchHelper;
    }


    /*
     * ------------------------------------------------------------------------
     */


    /**
     * Get VTT comments for the given Vtt id.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>ownerId - int</li>
     *     <li>vttId - int, id of a VTT object</li>
     *     <li>page - int, page number of the requestd page of comments</li>
     *   </ul>
     * 
     * @param wfinfo A map contains:
     *   <ul>
     *   <li>workflowId - long</li>
     *   <li>contextId - long</li>
     *   <li>activityId - long</li>
     * </ul>
     * 
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *     <li>html - a HTML source segment. (Generated by /WEB-INF/jsp/sarp/vtt/vttComments.jsp)<br>
     *           The following variables are available for use in the jsp:
     *           <ul>
     *             <li>comments - A list of Comment objects</li>
     *             <li>setting - A PageSetting objects</li>
     *           </ul>
     *     </li>
     *     <li>page - page number of the returned page</li>
     *   </ul>
     */
    public Map getComments(HttpServletRequest request, Map params, Map wfinfo) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long vttId = null;
        try {
            request.setAttribute("wfinfo", wfinfo);
            
            vttId = new Long((String) params.get("vttId"));
            if (vttId==null) {
                map.put("reason", "can't find this CategoryReference");
                return map;
            }
        } catch (Exception e) {
            map.put("reason", "can't find this CategoryReference");
            return map;
        }
        
        Long ownerId = null;
        try {
            ownerId = new Long((String) params.get("ownerId"));
            if (ownerId==null) {
                map.put("reason", "can't find this user");
                return map;
            }
        } catch (Exception e) {
            map.put("reason", "can't find this user");
            return map;
        }
        
        try {
            PageSetting setting = new PageSetting(10);
            setting.setPage((String) params.get("page"));
            
            Collection<VTTComment> comments = vttService.getComments(ownerId, vttId, setting);
            
            request.setAttribute("comments", comments);
            request.setAttribute("setting", setting);
            
            map.put("html", WebContextFactory.get().forwardToString("/WEB-INF/jsp/sarp/vtt/vttComments.jsp"));
            map.put("page", setting.getPage());
            map.put("successful", true);
            
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//getComments()
    
    
    /**
     * Create a VTT comment for the given CategoryReference id.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>ownerId - int</li>
     *     <li>vttId - int, id of a VTT object</li>
     *     <li>title - string, comment title</li>
     *     <li>content - string, comment content</li>
     *   </ul>
     * 
     * @param wfinfo A map contains:
     *   <ul>
     *   <li>workflowId - long</li>
     *   <li>contextId - long</li>
     *   <li>activityId - long</li>
     * </ul>
     * 
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *   </ul>
     */
    public Map createComment(HttpServletRequest request, Map params, Map wfinfo) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long vttId = null;
        try {
            request.setAttribute("wfinfo", wfinfo);
            
            vttId = new Long((String) params.get("vttId"));
            if (vttId==null) {
                map.put("reason", "can't find this VTT");
                return map;
            }
        } catch (Exception e) {
            map.put("reason", "can't find this VTT");
            return map;
        }
        
        Long ownerId = null;
        try {
            ownerId = new Long((String) params.get("ownerId"));
            if (ownerId==null) {
                map.put("reason", "can't find this user");
                return map;
            }
        } catch (Exception e) {
            map.put("reason", "can't find this user");
            return map;
        }
        
        try {
            String title = (String) params.get("title");
            String content = (String) params.get("content");
            
            if (title.length()>100) throw new Exception("title can't exceeds 100 chars");
            if (content.length()>8192) throw new Exception("content can't exceeds 8192 chars");
            
            String workflowId = (String) wfinfo.get("workflowId");
            String contextId = (String) wfinfo.get("contextId");
            String activityId = (String) wfinfo.get("activityId");
            
            VTTComment comment = vttService.createComment(new Long((String) wfinfo.get("workflowId")), ownerId, vttId, title, content, false);
            
            if (comment!=null) {
                // sending email
                try {
                    Set<User> recipients = vttService.getThreadUsers(ownerId, vttId);
                    String url = "workflow.do?workflowId="+workflowId+"&contextId="+contextId+"&activityId="+activityId;
                    
                    emailSender.enqueue(recipients, WebUtils.currentUserId(), url);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            
            map.put("successful", true);
            
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//createComment()
    
    
    /**
     * Delete the given Comment object. Only used by moderator.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>cid - int, id of the Comment object</li>
     *   </ul>
     *   
     * @param wfinfo A map contains:
     *   <ul>
     *   <li>workflowId - long</li>
     *   <li>contextId - long</li>
     *   <li>activityId - long</li>
     * </ul>
     * 
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *   </ul>
     */
    public Map deleteComment(Map params, Map wfinfo) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long cid = null;
        VTTComment comment = null;
        
        try {
            cid = new Long((String) params.get("cid"));
            if (cid==null) {
                map.put("reason", "no such Comment object");
                return map;
            }
            
            comment = vttService.getCommentById(cid);
            if (comment==null) {
                map.put("reason", "no such Comment object");
                return map;
            }
            
            //check if it's moderator, TODO
            if (comment.getAuthor().getId().equals(WebUtils.currentUserId())) {
                vttService.deleteComment(comment);
                
                /*
                 * delete from lucene
                 */
                IndexSearcher searcher = null;
                IndexReader reader = null;
                try {
                    searcher = searchHelper.getIndexSearcher();
                    
                    Hits hits = searcher.search(searchHelper.getParser().parse(
                        "workflowid:"+wfinfo.get("workflowId")
                       +" AND type:infoobjcomment AND commentid:"+cid
                    ));
                    
                    if (hits.length()>0) {
                        reader = searchHelper.getIndexReader();
                        reader.deleteDocument(hits.id(0));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    if (searcher!=null) searcher.close();
                    if (reader!=null) reader.close();
                }
            } else {
                map.put("reason", "You are not the owner of this comment");
                return map;
            }
            
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//deleteComment()
    
    
    /**
     * Set the voting choice on the given CHTComment.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>cid - int, id of the CHTComment object. Required.</li>
     *     <li>agree - string, "true" or "false". Whether or not the current user agree with the current object.</li>
     *   </ul>
     *   
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *     <li>numAgree - int</li>
     *     <li>numVote - int</li>
     *   </ul>
     */
    public Map setVotingOnComment(Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long cid = null;
        try {
            cid = new Long((String) params.get("cid"));
        } catch (Exception e) {
            map.put("reason", "catRefId is required.");
            return map;
        }
        
        boolean agree = "true".equalsIgnoreCase((String) params.get("agree"));
        
        try {
            VTTComment comment = null;
            
            YesNoVoting voting = systemService.getVoting(YesNoVoting.TYPE_SARP_VTT_COMMENT, cid);
            if (voting!=null) {
                comment = vttService.getCommentById(cid);
            } else {
                comment = vttService.setVotingOnComment(cid, agree);
            }
            
            map.put("numAgree", comment.getNumAgree());
            map.put("numVote", comment.getNumVote());
            map.put("voted", true);
            
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//setVotingOnComment()
    
    
    /**
     * Get CategoryPathValue for the given User id and CategoryPath id.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>userId - int, id of a User object</li>
     *     <li>pathId - int, id of a CategoryPath object</li>
     *   </ul>
     * 
     * @param wfinfo A map contains:
     *   <ul>
     *   <li>workflowId - long</li>
     *   <li>contextId - long</li>
     *   <li>activityId - long</li>
     * </ul>
     * 
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *     <li>html - a HTML source segment. (Generated by /WEB-INF/jsp/sarp/vtt/vttCategoryPathValue.jsp)<br>
     *           The following variables are available for use in the jsp:
     *           <ul>
     *             <li>value - A CategoryValue objects</li>
     *           </ul>
     *     </li>
     *     <li>page - page number of the returned page</li>
     *   </ul>
     */
    public Map getCategoryPathValue(HttpServletRequest request, Map params, Map wfinfo) {
        Map map = new HashMap();
        map.put("successful", false);
        
        User user = null;
        try {
            request.setAttribute("wfinfo", wfinfo);
            
            Long userId = new Long((String) params.get("userId"));
            if (userId==null) {
                map.put("reason", "can't find this user");
                return map;
            }
            
            user = systemService.getUserById(userId);
        } catch (Exception e) {
            map.put("reason", "can't find this user");
            return map;
        }
        
        request.setAttribute("user", user);
        
        Long pathId = null;
        try {
            request.setAttribute("wfinfo", wfinfo);
            
            pathId = new Long((String) params.get("pathId"));
            if (pathId==null) {
                map.put("reason", "can't find this CategoryPath");
                return map;
            }
        } catch (Exception e) {
            map.put("reason", "can't find this CategoryPath");
            return map;
        }
        
        try {
            CategoryPath path = vttService.getCategoryPathById(pathId);
            CategoryPathValue value = vttService.getCategoryPathValueByPathId(WebUtils.currentUserId(), pathId);
            if (value==null) {
                value = new CategoryPathValue();
                value.setPath(path);
                value.setCriterion("");
                value.setName("");
                value.setTag(true);
            }
            Set<String> tags = new TreeSet<String>();
            for (CategoryReference catRef : value.getPath().getCategories()) {
                for (TagReference tagRef : catRef.getTags()) {
                    tags.add(tagRef.getTag().getName());
                }
            }
            request.setAttribute("value", value);
            request.setAttribute("path", path);
            request.setAttribute("tags", tags);
            
            map.put("html", WebContextFactory.get().forwardToString("/WEB-INF/jsp/sarp/vtt/vttCategoryPathValue.jsp"));
            map.put("successful", true);
            
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//getCategoryValue()
    
    
    /**
     * Save CategoryPathValue for the given CategoryPath id.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>vttId - int, id of a VTT object</li>
     *     <li>pathId - int, id of a CategoryPath object</li>
     *     <li>name - string</li>
     *     <li>unit - string</li>
     *     <li>isTag - boolean</li>
     *   </ul>
     * 
     * @param wfinfo A map contains:
     *   <ul>
     *   <li>workflowId - long</li>
     *   <li>contextId - long</li>
     *   <li>activityId - long</li>
     * </ul>
     * 
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *     <li>html - a HTML source segment. (Generated by /WEB-INF/jsp/sarp/vtt/vttValueTree.jsp)<br>
     *           The following variables are available for use in the jsp:
     *           <ul>
     *             <li>value - A CategoryPathValue objects</li>
     *           </ul>
     *     </li>
     *     <li>page - page number of the returned page</li>
     *   </ul>
     */
    public Map saveCategoryPathValue(HttpServletRequest request, Map params, Map wfinfo) {
        Map map = new HashMap();
        map.put("successful", false);
        
        request.setAttribute("wfinfo", wfinfo);
        
        VTT vtt = null;
        try {
            Long vttId = new Long((String) params.get("vttId"));
            if (vttId==null) {
                map.put("reason", "can't find this VTT");
                return map;
            }
            vtt = vttService.getVTTById(vttId);
            request.setAttribute("vtt", vtt);
        } catch (Exception e) {
            map.put("reason", "can't find this VTT");
            return map;
        }
        
        Long pathId = null;
        try {
            pathId = new Long((String) params.get("pathId"));
            if (pathId==null) {
                map.put("reason", "can't find this CategoryPath");
                return map;
            }
        } catch (Exception e) {
            map.put("reason", "can't find this CategoryPath");
            return map;
        }
        
        String name = (String) params.get("name");
        String unit = (String) params.get("unit");
        
        if (name==null || name.length()==0) {
            map.put("reason", "please input measurement");
            return map;
        } else if (unit==null || unit.length()==0) {
            map.put("reason", "please input unit of measurement");
            return map;
        }
        
        try {
            vttService.saveCategoryPathValue(WebUtils.currentUserId(), pathId, name, unit, "true".equalsIgnoreCase((String) params.get("isTag")));
            
            map.put("html", WebContextFactory.get().forwardToString("/WEB-INF/jsp/sarp/vtt/vttValueTree.jsp"));
            map.put("successful", true);
            
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    } //saveCategoryValue()


    /**
     * Publish my VTT category.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>vttId - int, id of the VTT object. Required.</li>
     *   </ul>
     *   
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *   </ul>
     */
    public Map publish(Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long vttId = null;
        try {
            vttId = new Long((String) params.get("vttId"));
        } catch (Exception e) {
            map.put("reason", "chtId is required.");
            return map;
        }
        
        try {
            vttService.publish(vttId, WebUtils.currentUserId());
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//publish()
    
    
    /**
     * Get the ExpertUnitSet for the given path and expert.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>pathId - int, id of a CategoryPath object</li>
     *     <li>targetUserId - int</li>
     *   </ul>
     * 
     * @param wfinfo A map contains:
     *   <ul>
     *   <li>workflowId - long</li>
     *   <li>contextId - long</li>
     *   <li>activityId - long</li>
     * </ul>
     * 
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *     <li>html - a HTML source segment. (Generated by /WEB-INF/jsp/sarp/vtt/vttExpertUnitSet.jsp)<br>
     *           The following variables are available for use in the jsp:
     *           <ul>
     *             <li>path - A CategoryPath object</li>
     *             <li>freqs - A map from unit names to frequencies</li>
     *             <li>euset - A EUnitSet object</li>
     *             <li>comment - A string</li>
     *             <li>isOwner - A boolean to indicate if the current user is the same as the requested user</li>
     *           </ul>
     *     </li>
     *   </ul>
     */
    public Map getExpertUnitSet(HttpServletRequest request, Map params, Map wfinfo) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long pathId = null;
        try {
            request.setAttribute("wfinfo", wfinfo);
            
            pathId = new Long((String) params.get("pathId"));
            if (pathId==null) {
                map.put("reason", "can't find this Path");
                return map;
            }
        } catch (Exception e) {
            map.put("reason", "can't find this Path");
            return map;
        }
        
        Long targetUserId = null;
        try {
            targetUserId = new Long((String) params.get("targetUserId"));
            if (targetUserId==null) {
                map.put("reason", "can't find this User");
                return map;
            }
        } catch (Exception e) {
            map.put("reason", "can't find this User");
            return map;
        }
        
        try {
            ExpertPathComment comment = vttService.getExpertPathComment(pathId, targetUserId);
            CategoryPath path = vttService.getCategoryPathById(pathId);
            List<MUnitSet> musets = vttService.getMUnitSetsByPathId(pathId);
            
            TreeMap<MUnitSet, TreeMap<String, Object[]>> grid = new TreeMap<MUnitSet, TreeMap<String, Object[]>>();
            
            boolean noneSelected = true;
            
            for (MUnitSet mUnitSet : musets) {
                EUnitSet eUnitSet = mUnitSet.getExpUnits().get(targetUserId);
                TreeMap<String, Object[]> row = grid.get(mUnitSet);
                
                if (row==null) {
                    row = new TreeMap<String, Object[]>();
                    grid.put(mUnitSet, row);
                }
                
                for (Map.Entry<String, Integer> entry : mUnitSet.getFreqs().entrySet()) {
                    String unit = entry.getKey();
                    Integer count = entry.getValue();
                    Object[] cols = row.get(unit);
                    if (cols==null) {
                        cols = new Object[] {0, false, false, false, false};
                        row.put(unit, cols);
                    }
                    
                    cols[0] = ((Integer) cols[0]) + count;
                    if (eUnitSet!=null) {
                        if (eUnitSet.getApprs().get(unit)==Boolean.TRUE) {
                            cols[1] = true;
                        }
                        if (eUnitSet.getAvails().get(unit)==Boolean.TRUE) {
                            cols[2] = true;
                        }
                        if (eUnitSet.getDups().get(unit)==Boolean.TRUE) {
                            cols[3] = true;
                        }
                        if (eUnitSet.getRecs().get(unit)==Boolean.TRUE) {
                            cols[4] = true;
                            noneSelected = false;
                        }
                    }
                }
            }
            
            request.setAttribute("path", path);
            request.setAttribute("grid", grid);
            request.setAttribute("comment", comment);
            request.setAttribute("noneSelected", noneSelected);
            request.setAttribute("isOwner", WebUtils.currentUserId().equals(targetUserId));
            map.put("html", WebContextFactory.get().forwardToString("/WEB-INF/jsp/sarp/vtt/vttExpertUnitSet.jsp"));
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    } //getExpertUnitSet()
    
    
    /**
     * Publish my Expert Units.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>vttId - int, id of the VTT object. Required.</li>
     *   </ul>
     *   
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *   </ul>
     */
    public Map publishExpertUnits(Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long vttId = null;
        try {
            vttId = new Long((String) params.get("vttId"));
        } catch (Exception e) {
            map.put("reason", "chtId is required.");
            return map;
        }
        
        try {
            vttService.publishExpertUnits(vttId);
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    } //publishExpertUnits()
    
    
    /**
     * Create a VTT comment for the given vtt.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>vttId - int, id of a VTT object</li>
     *     <li>targetUserId - int</li>
     *     <li>title - string, comment title</li>
     *     <li>content - string, comment content</li>
     *   </ul>
     * 
     * @param wfinfo A map contains:
     *   <ul>
     *   <li>workflowId - long</li>
     *   <li>contextId - long</li>
     *   <li>activityId - long</li>
     * </ul>
     * 
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *   </ul>
     */
    public Map createSpecialistComment(HttpServletRequest request, Map params, Map wfinfo) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long vttId = null;
        try {
            request.setAttribute("wfinfo", wfinfo);
            
            vttId = new Long((String) params.get("vttId"));
            if (vttId==null) {
                map.put("reason", "can't find this VTT");
                return map;
            }
        } catch (Exception e) {
            map.put("reason", "can't find this VTT");
            return map;
        }
        
        Long targetUserId = null;
        try {
            targetUserId = new Long((String) params.get("targetUserId"));
            if (targetUserId==null) {
                map.put("reason", "can't find this User");
                return map;
            }
        } catch (Exception e) {
            map.put("reason", "can't find this User");
            return map;
        }
        
        try {
            String title = (String) params.get("title");
            String content = (String) params.get("content");
            
            if (title.length()>100) throw new Exception("title can't exceeds 100 chars");
            if (content.length()>8192) throw new Exception("content can't exceeds 8192 chars");
            
            VTTSpecialistComment comment = vttService.createSpecialistComment(new Long((String) wfinfo.get("workflowId")), vttId, targetUserId, title, content, false);
            
            map.put("successful", true);
            
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//createSpecialistComment()
    
    
    /**
     * Get VTT Specialist comments for the given Vtt id.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>vttId - int, id of a VTT object</li>
     *     <li>targetUserId - int</li>
     *     <li>page - int, page number of the requestd page of comments</li>
     *   </ul>
     * 
     * @param wfinfo A map contains:
     *   <ul>
     *   <li>workflowId - long</li>
     *   <li>contextId - long</li>
     *   <li>activityId - long</li>
     * </ul>
     * 
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *     <li>html - a HTML source segment. (Generated by /WEB-INF/jsp/sarp/vtt/vttComments.jsp)<br>
     *           The following variables are available for use in the jsp:
     *           <ul>
     *             <li>comments - A list of Comment objects</li>
     *             <li>setting - A PageSetting objects</li>
     *           </ul>
     *     </li>
     *     <li>page - page number of the returned page</li>
     *   </ul>
     */
    public Map getSpecialistComments(HttpServletRequest request, Map params, Map wfinfo) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long vttId = null;
        try {
            request.setAttribute("wfinfo", wfinfo);
            
            vttId = new Long((String) params.get("vttId"));
            if (vttId==null) {
                map.put("reason", "can't find this VTT");
                return map;
            }
        } catch (Exception e) {
            map.put("reason", "can't find this VTT");
            return map;
        }
        
        Long targetUserId = null;
        try {
            targetUserId = new Long((String) params.get("targetUserId"));
            if (targetUserId==null) {
                map.put("reason", "can't find this User");
                return map;
            }
        } catch (Exception e) {
            map.put("reason", "can't find this User");
            return map;
        }
        
        try {
            PageSetting setting = new PageSetting(10);
            setting.setPage((String) params.get("page"));
            
            Collection<VTTSpecialistComment> comments = vttService.getSpecialistComments(targetUserId, vttId, setting);
            
            request.setAttribute("comments", comments);
            request.setAttribute("setting", setting);
            
            map.put("html", WebContextFactory.get().forwardToString("/WEB-INF/jsp/sarp/vtt/vttSpecialistComments.jsp"));
            map.put("page", setting.getPage());
            map.put("successful", true);
            
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//getSpecialistComments()
    
    
    /**
     * Delete the given SpecialistComment object. Only used by moderator.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>cid - int, id of the SpecialistComment object</li>
     *   </ul>
     *   
     * @param wfinfo A map contains:
     *   <ul>
     *   <li>workflowId - long</li>
     *   <li>contextId - long</li>
     *   <li>activityId - long</li>
     * </ul>
     * 
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *   </ul>
     */
    public Map deleteSpecialistComment(Map params, Map wfinfo) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long cid = null;
        VTTSpecialistComment comment = null;
        
        try {
            cid = new Long((String) params.get("cid"));
            if (cid==null) {
                map.put("reason", "no such SpecialistComment object");
                return map;
            }
            
            comment = vttService.getSpecialistCommentById(cid);
            if (comment==null) {
                map.put("reason", "no such SpecialistComment object");
                return map;
            }
            
            //check if it's moderator, TODO
            if (comment.getAuthor().getId().equals(WebUtils.currentUserId())) {
                vttService.deleteSpecialistComment(comment);
                
                /*
                 * delete from lucene
                 */
                IndexSearcher searcher = null;
                IndexReader reader = null;
                try {
                    searcher = searchHelper.getIndexSearcher();
                    
                    Hits hits = searcher.search(searchHelper.getParser().parse(
                        "workflowid:"+wfinfo.get("workflowId")
                       +" AND type:infoobjcomment AND commentid:"+cid
                    ));
                    
                    if (hits.length()>0) {
                        reader = searchHelper.getIndexReader();
                        reader.deleteDocument(hits.id(0));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    if (searcher!=null) searcher.close();
                    if (reader!=null) reader.close();
                }
            } else {
                map.put("reason", "You are not the owner of this comment");
                return map;
            }
            
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//deleteSpecialistComment()
    
    
    /**
     * Set the voting choice on the given CHTComment.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>cid - int, id of the CHTComment object. Required.</li>
     *     <li>agree - string, "true" or "false". Whether or not the current user agree with the current object.</li>
     *   </ul>
     *   
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *     <li>numAgree - int</li>
     *     <li>numVote - int</li>
     *   </ul>
     */
    public Map setVotingOnSpecialistComment(Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long cid = null;
        try {
            cid = new Long((String) params.get("cid"));
        } catch (Exception e) {
            map.put("reason", "catRefId is required.");
            return map;
        }
        
        boolean agree = "true".equalsIgnoreCase((String) params.get("agree"));
        
        try {
            VTTSpecialistComment comment = null;
            
            YesNoVoting voting = systemService.getVoting(YesNoVoting.TYPE_SARP_VTT_SPEC_COMMENT, cid);
            if (voting!=null) {
                comment = vttService.getSpecialistCommentById(cid);
            } else {
                comment = vttService.setVotingOnSpecialistComment(cid, agree);
            }
            
            map.put("numAgree", comment.getNumAgree());
            map.put("numVote", comment.getNumVote());
            map.put("voted", true);
            
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//setVotingOnSpecialistComment()
    
    
    /**
     * Toggle selection
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>pathId</li>
     *     <li>name</li>
     *     <li>type</li>
     *     <li>criterion</li>
     *     <li>checked</li>
     *   </ul>
     *   
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *   </ul>
     */
    public Map toggleSelection(Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long pathId = null;
        try {
            pathId = new Long((String) params.get("pathId"));
        } catch (Exception e) {
            map.put("reason", "pathId is required.");
            return map;
        }
        
        String name = (String) params.get("name");
        String type = (String) params.get("type");
        String criterion = (String) params.get("criterion");
        
        boolean checked = "true".equalsIgnoreCase((String) params.get("checked"));
        
        try {
            vttService.setToggleSelection(pathId, name, type, criterion, checked);
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//toggleSelection()
    
    
    /**
     * Publish my Expert Units.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>musetId - int, id of the MUnitSet object. Required.</li>
     *     <li>content - string. Required.</li>
     *   </ul>
     *   
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *   </ul>
     */
    public Map setUnitComment(Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long pathId = null;
        try {
            pathId = new Long((String) params.get("pathId"));
        } catch (Exception e) {
            map.put("reason", "pathId is required.");
            return map;
        }
        
        try {
            vttService.setUnitComment(pathId, (String) params.get("content"));
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    } //setUnitComment()
    
    
    /**
     * Get the path stats by experts.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>pathId - int, id of the CategoryPath object. Required.</li>
     *   </ul>
     *   
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *     <li>html - a HTML source segment. (Generated by /WEB-INF/jsp/sarp/vtt/vttPathStats.jsp)<br>
     *           The following variables are available for use in the jsp:
     *           <ul>
     *             <li>comments - A list of Comment objects</li>
     *             <li>setting - A PageSetting objects</li>
     *           </ul>
     *     </li>
     *   </ul>
     */
    public Map getPathStats(HttpServletRequest request, Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long pathId = null;
        try {
            pathId = new Long((String) params.get("pathId"));
        } catch (Exception e) {
            map.put("reason", "pathId is required.");
            return map;
        }
        
        try {
            TreeMap<MUnitSet, TreeMap<String, Object[]>> grid = new TreeMap<MUnitSet, TreeMap<String, Object[]>>();
            
            boolean selected = false;
            List<MUnitSet> msets = vttService.getMUnitSetsByPathId(pathId);
            
            // default one
            MUnitSet defUnitSet = null;
            for (MUnitSet one : msets) {
                if ("".equals(one.getName())) {
                    defUnitSet = one;
                    break;
                }
            }
            
            boolean found = false;
            boolean none = true;
            
            int totalSelection = 0;
            for (MUnitSet mUnitSet : msets) {
                totalSelection += mUnitSet.getUserSelections().size();
                TreeMap<String, Object[]> block = new TreeMap<String, Object[]>();
                grid.put(mUnitSet, block);
                
                String myUnit = mUnitSet.getUserSelections().get(WebUtils.currentUserId());
                
                for (String unit : mUnitSet.getApprFreqs().keySet()) {
                    Object[] row = block.get(unit);
                    if (row==null) {
                        row = new Object[] {0, 0, 0, 0, false, 0, 0};
                        block.put(unit, row);
                    }
                    row[0] = mUnitSet.getApprFreqs().get(unit);
                    if (unit.equals(myUnit)) {
                        row[4] = true;
                        none = false;
                    }
                }
                
                for (String unit : mUnitSet.getAvailFreqs().keySet()) {
                    Object[] row = block.get(unit);
                    if (row==null) {
                        row = new Object[] {0, 0, 0, 0, false, 0, 0};
                        block.put(unit, row);
                    }
                    row[1] = mUnitSet.getAvailFreqs().get(unit);
                    if (unit.equals(myUnit)) {
                        row[4] = true;
                        none = false;
                    }
                }
                
                for (String unit : mUnitSet.getDupFreqs().keySet()) {
                    Object[] row = block.get(unit);
                    if (row==null) {
                        row = new Object[] {0, 0, 0, 0, false, 0, 0};
                        block.put(unit, row);
                    }
                    row[2] = mUnitSet.getDupFreqs().get(unit);
                    if (unit.equals(myUnit)) {
                        row[4] = true;
                        none = false;
                    }
                }
                
                for (String unit : mUnitSet.getRecoFreqs().keySet()) {
                    Object[] row = block.get(unit);
                    if (row==null) {
                        row = new Object[] {0, 0, 0, 0, false, 0, 0};
                        block.put(unit, row);
                    }
                    row[3] = mUnitSet.getRecoFreqs().get(unit);
                    if (unit.equals(myUnit)) {
                        row[4] = true;
                        none = false;
                    }
                }
                
                for (Map.Entry<Long, String> entry : mUnitSet.getUserSelections().entrySet()) {
                    String unit = entry.getValue();
                    Object[] row = block.get(unit);
                    if (row==null) {
                        row = new Object[] {0, 0, 0, 0, false, 0, 0};
                        block.put(unit, row);
                    }
                    row[5] = (Integer) row[5] + 1;
                    if (unit.equals(myUnit)) {
                        row[4] = true;
                        found = true;
                    }
                }
            }
            
            for (TreeMap<String, Object[]> block : grid.values()) {
                for (String unit : block.keySet()) {
                    Object[] row = block.get(unit);
                    row[6] = totalSelection;
                }
            }
            
            request.setAttribute("pathId", pathId);
            request.setAttribute("defUnitSet", defUnitSet);
            request.setAttribute("found", found);
            request.setAttribute("none", none);
            request.setAttribute("grid", grid);
            request.setAttribute("selected", selected);
            map.put("html", WebContextFactory.get().forwardToString("/WEB-INF/jsp/sarp/vtt/vttPathStats.jsp"));
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    } //getPathStats()
    
    
    /**
     * Publish my Expert Units.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>pathId - int, id of the CategoryPath object. Required.</li>
     *     <li>unit - string. Required.</li>
     *   </ul>
     *   
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *   </ul>
     */
    public Map saveSelection(Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long pathId = null;
        try {
            pathId = new Long((String) params.get("pathId"));
        } catch (Exception e) {
            map.put("reason", "pathId is required.");
            return map;
        }
        
        Long musetId = null;
        try {
            musetId = new Long((String) params.get("musetId"));
        } catch (Exception e) {
            map.put("reason", "musetId is required.");
            return map;
        }
        
        try {
            String unit = (String) params.get("unit");
            if (unit!=null) {
                unit = unit.trim();
            } else {
                unit = "";
            }
            vttService.saveSelection(pathId, musetId, WebUtils.currentUserId(), unit);
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    } //saveSelection()
    
    
    /**
     * Add a new CategoryPath.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>vttId - int, id of the VTT object. Required.</li>
     *     <li>pathId - int, id of the CategoryPath object. Required.</li>
     *   </ul>
     *   
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *   </ul>
     */
    public Map addPath(HttpServletRequest request, Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        String pathIds = (String) params.get("ids");        
        Long vttId = new Long((String) params.get("vttId"));
        
        try {
            CategoryPath path = vttService.createPath(vttId, pathIds);
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    } //addPath()
    
    
    /**
     * Add all CategoryPath paths.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>vttId - int, id of the VTT object. Required.</li>
     *   </ul>
     *   
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *   </ul>
     */
    public Map getPaths(HttpServletRequest request, Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long vttId = new Long((String) params.get("vttId"));
        
        try {
            VTT vtt = vttService.getVTTById(vttId);
            
            request.setAttribute("vtt", vtt);
            map.put("html", WebContextFactory.get().forwardToString("/WEB-INF/jsp/sarp/vtt/vttModPaths.jsp"));
            
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    } //getPaths()
    

    public Map getPathInfo(HttpServletRequest request, Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long pathId = new Long((String) params.get("pathId"));
        
        try {
            CategoryPath path = vttService.getCategoryPathById(pathId);
            List<MUnitSet> musets = vttService.getMUnitSetsByPathId(pathId);
            
            TreeMap<MUnitSet, TreeSet<String>> grid = new TreeMap<MUnitSet, TreeSet<String>>();
            for (MUnitSet muset : musets) {
                TreeSet<String> units = new TreeSet<String>();
                grid.put(muset, units);
                
                units.addAll(muset.getApprFreqs().keySet());
                units.addAll(muset.getAvailFreqs().keySet());
                units.addAll(muset.getDupFreqs().keySet());
                units.addAll(muset.getRecoFreqs().keySet());
            }
            
            request.setAttribute("path", path);
            request.setAttribute("musets", musets);
            request.setAttribute("grid", grid);
            map.put("html", WebContextFactory.get().forwardToString("/WEB-INF/jsp/sarp/vtt/vttModPathInfo.jsp"));
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }
    
    
    public Map deletePath(HttpServletRequest request, Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long vttId = new Long((String) params.get("vttId"));
        Long pathId = new Long((String) params.get("pathId"));
        
        try {
            vttService.deletePathById(vttId, pathId);
            
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    } //deletePath()
    
    
    public Map addIndicator(HttpServletRequest request, Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long pathId = new Long((String) params.get("pathId"));
        String indicator = (String) params.get("indicator");
        
        try {
            vttService.addIndicator(pathId, indicator);
            
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    } //addIndicator()
    
    
    public Map deleteIndicator(HttpServletRequest request, Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long musetId = new Long((String) params.get("musetId"));
        
        try {
            vttService.deleteIndicator(musetId);
            
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    } //deleteIndicator()
    
    
    public Map addUnit(HttpServletRequest request, Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long musetId = new Long((String) params.get("musetId"));
        String unit = (String) params.get("unit");
        
        try {
            vttService.addUnit(musetId, unit);
            
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    } //addUnit()
    
    
    public Map deleteUnit(HttpServletRequest request, Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long musetId = new Long((String) params.get("musetId"));
        String unit = (String) params.get("unit");
        
        try {
            vttService.deleteUnit(musetId, unit);
            
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    } //deleteUnit()


    /**
     * Add raw CategoryPath paths.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>vttId - int, id of the VTT object. Required.</li>
     *   </ul>
     *   
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *   </ul>
     */
    public Map getRawPaths(HttpServletRequest request, Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long vttId = new Long((String) params.get("vttId"));
        
        try {
            VTT vtt = vttService.getVTTById(vttId);
            
            request.setAttribute("vtt", vtt);
            request.setAttribute("paths", vtt.getPaths());
            String sorting = (String) params.get("sorting");
            if (!"z-a".equalsIgnoreCase(sorting) && !"0-9".equalsIgnoreCase(sorting)
                    && !"9-0".equalsIgnoreCase(sorting)) {
                sorting = "a-z";
            }
            request.setAttribute("sorting", sorting);
            map.put("html", WebContextFactory.get().forwardToString("/WEB-INF/jsp/sarp/vtt/vttCatsTable.jsp"));
            
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    } //getRawPaths()
    
    
}//class VTTAgent
