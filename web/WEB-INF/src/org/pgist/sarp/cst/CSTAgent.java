package org.pgist.sarp.cst;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;

import org.apache.lucene.index.IndexReader;
import org.apache.lucene.search.Hits;
import org.apache.lucene.search.IndexSearcher;
import org.directwebremoting.WebContextFactory;
import org.pgist.sarp.bct.BCT;
import org.pgist.sarp.cht.CHT;
import org.pgist.sarp.drt.InfoObject;
import org.pgist.sarp.vtt.VTT;
import org.pgist.search.SearchHelper;
import org.pgist.system.EmailSender;
import org.pgist.system.SystemService;
import org.pgist.system.YesNoVoting;
import org.pgist.users.User;
import org.pgist.util.PageSetting;
import org.pgist.util.WebUtils;


/**
 * DWR AJAX Agent class.<br>
 * Provide AJAX services to client programs.<br>
 * In this document, all the NON-AJAX methods are marked out. So all methods
 * <span style="color:red;">without</span> such a description
 * <span style="color:red;">ARE</span> AJAX service methods.<br>
 * 
 * @author kenny
 *
 */
public class CSTAgent {
    
    
    private CSTService cstService = null;
    
    private SystemService systemService = null;
    
    private SearchHelper searchHelper;
    
    private EmailSender emailSender;
    
    
    /**
     * This is not an AJAX service method.
     *
     * @param cstService
     */
    public void setCstService(CSTService cstService) {
        this.cstService = cstService;
    }


    public void setSystemService(SystemService systemService) {
        this.systemService = systemService;
    }


    public void setSearchHelper(SearchHelper searchHelper) {
        this.searchHelper = searchHelper;
    }


    public void setEmailSender(EmailSender emailSender) {
        this.emailSender = emailSender;
    }


    /*
     * ------------------------------------------------------------------------
     */


    /**
     * Get tags related OR (but not BOTH) unrelated with a given category.
     *
     * @param params A map contains:<br>
     *         <ul>
     *           <li>modtool - boolean</li>
     *           <li>cstId - int, the current CST instance id</li>
     *           <li>userId - int, the id of a User object, optional, default is the current user</li>
     *           <li>categoryId - int, the id of a CategoryReference object</li>
     *           <li>type - int, type==0 denotes related tags; type==1 denotes unrelated tags.</li>
     *           <li>page - int, the page to be displayed of related tags (for type==0) or unrelated tags (for type==1)</li>
     *           <li>count - int, number of tag related (for type==0) or unrelated (for type==1) to be displayed on a page, -1 denotes all</li>
     *           <li>orphanPage - int, the page to be displayed of orphan tags, only for type==1</li>
     *           <li>orphanCount - int, orphan tag number to be displayed on a page, -1 denotes all, only for type==1</li>
     *         </ul>
     *         
     * @return A map contains:<br>
     *         <ul>
     *           <li>successful - a boolean value denoting if the operation succeeds</li>
     *           <li>catRef - a CategoryReference object (valid when successful==false)</li>
     *           <li>tags - A list of related TagReference objects (only for type==1)</li>
     *           <li>html - a HTML source segment for related tags. (valid when successful==true)<br>
     *                  for type==0, it's generated by /WEB-INF/jsp/cvo/cstTags0.jsp,<br>
     *                  for type==1, it's generated by /WEB-INF/jsp/cvo/cstTags1.jsp, and
     *                  the following variables are available for use in jsp page:
     *                  <ul>
     *                    <li>modtool - boolean</li>
     *                    <li>user - A User object</li>
     *                    <li>cst - A CST object</li>
     *                    <li>catRef - A CategoryReference object</li>
     *                    <li>tags - A list of related TagReference objects</li>
     *                    <li>orphanTags - A list of orphan TagReference objects (only for type==1)</li>
     *                    <li>setting - A PageSetting object</li>
     *                    <li>orphanSetting - A PageSetting object for orphan tags</li>
     *                  </ul>
     *           </li>
     *           <li>reason - reason why operation failed (valid when successful==false)</li>
     *         </ul>
     */
    public Map getTags(HttpServletRequest request, Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        if ("true".equals((String) params.get("modtool"))) {
            if (!WebUtils.checkRole("moderator")) {
                map.put("reason", "access denied.");
                return map;
            }
            
            request.setAttribute("modtool", true);
        } else {
            request.setAttribute("modtool", false);
        }
        
        Long userId = null;
        try {
            userId = new Long((String) params.get("userId"));
        } catch (Exception e) {
        }
        
        if (userId==null) userId = WebUtils.currentUserId();
        
        Long cstId = new Long((String) params.get("cstId"));
        try {
            User user = systemService.getUserById(userId);
            request.setAttribute("user", user);
            
            CST cst = cstService.getCSTById(cstId);
            if (cst==null) {
                map.put("reason", "no such cst!");
                return map;
            }
            
            Long categoryId = new Long( (String) params.get("categoryId") );
            
            CategoryReference ref = cstService.getCategoryReferenceById(categoryId);
            if (ref==null) {
                map.put("reason", "CategoryReference doesn't exist.");
                return map;
            }
            
            PageSetting setting = new PageSetting();
            
            try {
                setting.setRowOfPage(Integer.parseInt((String) params.get("count")));
            } catch (Exception e) {
                setting.setRowOfPage(-1);
            }
            
            try {
                setting.setPage(Integer.parseInt((String) params.get("page")));
            } catch (Exception e) {
                setting.setPage(1);
            }
            
            Collection tags = null;
            
            String type = (String) params.get("type");
            if ("0".equals(type)) {
                tags = cstService.getRealtedTags(cstId, categoryId, setting);
                
                map.put("tags", tags);
            } else if ("1".equals(type)) {
                tags = cstService.getUnrelatedTags(cstId, categoryId, setting);
                
                PageSetting orphanSetting = new PageSetting();
                
                try {
                    orphanSetting.setPage(Integer.parseInt((String) params.get("orphanPage")));
                } catch (Exception e) {
                    orphanSetting.setPage(1);
                }
                
                try {
                    orphanSetting.setRowOfPage(Integer.parseInt((String) params.get("orphanCount")));
                } catch (Exception e) {
                    orphanSetting.setRowOfPage(-1);
                }
                
                Collection orphanTags = cstService.getOrphanTags(cstId, categoryId, orphanSetting);
                
                request.setAttribute("orphanTags", orphanTags);
            } else {
                map.put("reason", "unknown type: "+type);
                return map;
            }
            
            request.setAttribute("cst", cst);
            request.setAttribute("catRef", ref);
            request.setAttribute("tags", tags);
            request.setAttribute("setting", setting);
            
            if ("0".equals(type)) {
                map.put("html", WebContextFactory.get().forwardToString("/WEB-INF/jsp/sarp/cst/cstTags0.jsp"));
            } else {
                map.put("html", WebContextFactory.get().forwardToString("/WEB-INF/jsp/sarp/cst/cstTags1.jsp"));
            }
            
            map.put("catRef", ref);
            
            map.put("successful", true);
        } catch(Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
        }
        
        return map;
    }//getTags()
    
    
    /**
     * Get tags related with a given category.
     *
     * @param params A map contains:<br>
     *         <ul>
     *           <li>cstId - int, the current CST instance id</li>
     *           <li>categoryId - int, the id of a CategoryReference object</li>
     *         </ul>
     *         
     * @return A map contains:<br>
     *         <ul>
     *           <li>successful - a boolean value denoting if the operation succeeds</li>
     *           <li>reason - reason why operation failed (valid when successful==false)</li>
     *           <li>tags - A list of related TagReference objects</li>
     *         </ul>
     */
    public Map getRTags(HttpServletRequest request, Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long cstId = new Long((String) params.get("cstId"));
        try {
            CST cst = cstService.getCSTById(cstId);
            if (cst==null) {
                map.put("reason", "no such cst!");
                return map;
            }
            
            Long categoryId = new Long( (String) params.get("categoryId") );
            
            CategoryInfo ref = cstService.getCategoryInfoById(categoryId);
            if (ref==null) {
                map.put("reason", "CategoryReference doesn't exist.");
                return map;
            }
            
            map.put("catRef", ref);
            map.put("tags", ref.getCatRef().getTags());
            map.put("successful", true);
        } catch(Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
        }
        
        return map;
    }//getRTags()
    
    
    /**
     * Get tags which are not related to any category in the speicified BCT (Orphan Tags).
     *
     * @param params A map contains:<br>
     *         <ul>
     *           <li>cstId - int, the current CST instance id</li>
     *           <li>modtool - string, "true" or "false"</li>
     *           <li>page - int, the page to be displayed of unrelated tags, optional, default is 1</li>
     *           <li>count - int, the rows number per page, optional, default is -1, which means to get all tags</li>
     *         </ul>
     *         
     * @return A map contains:<br>
     *         <ul>
     *           <li>successful - a boolean value denoting if the operation succeeds</li>
     *           <li>html - a HTML source segment for tags. (Generated by /WEB-INF/jsp/cvo/orphanTags.jsp)<br>
     *                  The following variables are available for use in the jsp:
     *                  <ul>
     *                    <li>cst - A CST object</li>
     *                    <li>tags - A list of TagReference object</li>
     *                    <li>setting - A PageSetting object</li>
     *                  </ul>
     *           </li>
     *           <li>reason - reason why operation failed (valid when successful==false)</li>
     *         </ul>
     */
    public Map getOrphanTags(HttpServletRequest request, Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        if ("true".equals((String) params.get("modtool"))) {
            if (!WebUtils.checkRole("moderator")) {
                map.put("reason", "access denied.");
                return map;
            }
            
            request.setAttribute("modtool", true);
        } else {
            request.setAttribute("modtool", false);
        }
        
        Long cstId = new Long((String) params.get("cstId"));
        try {
            CST cst = cstService.getCSTById(cstId);
            if (cst==null) {
                map.put("reason", "no such cst!");
                return map;
            }
            
            PageSetting setting = new PageSetting();
            
            try {
                setting.setPage(Integer.parseInt((String) params.get("page")));
            } catch (Exception e) {
                setting.setPage(1);
            }
            
            try {
                setting.setRowOfPage(Integer.parseInt((String) params.get("count")));
            } catch (Exception e) {
                setting.setRowOfPage(-1);
            }
            
            
            Collection tags = cstService.getOrphanTags(cstId, setting, "true".equalsIgnoreCase((String) params.get("modtool")));
            
            request.setAttribute("cst", cst);
            request.setAttribute("tags", tags);
            request.setAttribute("setting", setting);
            
            map.put("html", WebContextFactory.get().forwardToString("/WEB-INF/jsp/cvo/orphanTags.jsp"));
            
            map.put("successful", true);
        } catch(Exception e) {
            e.printStackTrace();
            map.put("successful", false);
            map.put("reason", e.getMessage());
        }
        
        return map;
    }//getOrphanTags()
    
    
    /**
     * Add a new category to the given BCT.<br>
     * <ul>
     *    <li>
     *       if a category with this name exists, use it directly (in this case, addCategory() works the same as copyCategory());<br>
     *       else create a new category.
     *    </li>
     *    <li>
     *       add the category to the tree, if parent is specified, the category will be added to be child of this parent;<br>
     *       otherwise, it will be added to the root category of bct. Root category is invisible to user.
     *    </li>
     * <ul>
     * 
     * @param params A map contains:<br>
     *         <ul>
     *           <li>cstId - int, the current CST instance id</li>
     *           <li>parentId - int, the parent CategoryReference instance id, if null or invalid, rootId will be used.</li>
     *           <li>name - string, name of the new category</li>
     *         </ul>
     *         
     * @return A map contains:<br>
     *         <ul>
     *           <li>successful - a boolean value denoting if the operation succeeds</li>
     *           <li>reason - reason why operation failed (valid when successful==false)</li>
     *           <li>newId - int, id of the new CategoryReference instance</li>
     *         </ul>
     */
    public Map addCategory(Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long parentId = null;
        try {
            parentId = new Long((String)params.get("parentId"));
        } catch (Exception e) {
        }
        
        try {
            Long cstId = new Long((String) params.get("cstId"));
            String name = (String) params.get("name");
            
            if (name==null || "".equals(name.trim())) {
                map.put("reason", "can't create a category which name is empty.");
                return map;
            }
            
            CategoryReference newCat = cstService.addCategoryReference(cstId, parentId, name);
            
            map.put("newId", newCat.getId());
            
            map.put("successful", true);
        } catch(Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
        }
        
        return map;
    }//addCategory()
    
    
    /**
     * Copy one category from one parent to another parent.
     * 
     * @param params A map contains:<br>
     *         <ul>
     *           <li>bctId - int, the current BCT instance id</li>
     *           <li>categoryId - int, id of the CategoryReference to be copied</li>
     *           <li>parentId - int, the new parent CategoryReference instance id, if null or invalid, rootId will be used.</li>
     *         </ul>
     *         
     * @return A map contains:<br>
     *         <ul>
     *           <li>successful - a boolean value denoting if the operation succeeds</li>
     *           <li>reason - reason why operation failed (valid when successful==false)</li>
     *         </ul>
     */
    public Map copyCategory(Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long categoryId = null;
        try {
            categoryId = new Long((String)params.get("categoryId"));
        } catch (Exception e) {
            map.put("reason", "invalid categoryId");
            return map;
        }
        
        Long parentId = null;
        try {
            parentId = new Long((String)params.get("parentId"));
        } catch (Exception e) {
        }
        
        Long bctId = null;
        try {
            bctId = new Long((String)params.get("bctId"));
        } catch (Exception e) {
            map.put("reason", "invalid bctId");
            return map;
        }
        
        try {
            cstService.copyCategoryReference(bctId, parentId, categoryId);
            map.put("successful", true);
        } catch(Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
        }
        
        return map;
    }//copyCategory()
    
    
    /**
     * Duplicate from the specified category and add the new category to be child of the specified parent.<br>
     * 
     * Duplicate is difference from Copy in that, duplicate will create a new category with a new name,
     * but Copy just use the existed category.<br>
     * 
     * Note that the new category by duplicate will own the same tags as the original cateogry.<br>
     * 
     * @param params A map contains:<br>
     *         <ul>
     *           <li>bctId - int, the current BCT instance id</li>
     *           <li>categoryId - int, id of the CategoryReference to be duplicate</li>
     *           <li>name - string, name of the new CategoryReference</li>
     *           <li>parentId - int, the parent CategoryReference instance id, if null or invalid, rootId will be used.</li>
     *         </ul>
     *         
     * @return A map contains:<br>
     *         <ul>
     *           <li>successful - a boolean value denoting if the operation succeeds</li>
     *           <li>reason - reason why operation failed (valid when successful==false)</li>
     *           <li>newId - int, id of the new CategoryReference instance</li>
     *         </ul>
     */
    public Map duplicateCategory(Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        String name = (String) params.get("name");
        if (name==null || "".equals(name.trim())) {
            map.put("reason", "please give the name of the new category.");
            return map;
        }
        
        Long categoryId = null;
        try {
            categoryId = new Long((String)params.get("categoryId"));
        } catch (Exception e) {
            map.put("reason", "invalid categoryId");
            return map;
        }
        
        Long parentId = null;
        try {
            parentId = new Long((String)params.get("parentId"));
        } catch (Exception e) {
        }
        
        Long bctId = null;
        try {
            bctId = new Long((String)params.get("bctId"));
        } catch (Exception e) {
            map.put("reason", "invalid bctId");
            return map;
        }
        
        try {
            CategoryReference newCat = cstService.duplicateCategoryReference(bctId, parentId, categoryId, name);
            
            map.put("newId", newCat.getId());
            
            map.put("successful", true);
        } catch(Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
        }
        
        return map;
    }//duplicateCategory()
    
    
    /**
     * Move one category from parent0 to parent1.
     * 
     * @param params A map contains:<br>
     *         <ul>
     *           <li>cstId - int, the current CST instance id</li>
     *           <li>categoryId - int, id of the CategoryReference to be copied</li>
     *           <li>parent0Id - int, the old parent CategoryReference instance id, if null or invalid, rootId will be used.</li>
     *           <li>parent1Id - int, the new parent CategoryReference instance id, if null or invalid, rootId will be used.</li>
     *         </ul>
     *         
     * @return A map contains:<br>
     *         <ul>
     *           <li>successful - a boolean value denoting if the operation succeeds</li>
     *           <li>reason - reason why operation failed (valid when successful==false)</li>
     *         </ul>
     */
    public Map moveCategory(Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long categoryId = null;
        try {
            categoryId = new Long((String)params.get("categoryId"));
        } catch (Exception e) {
            map.put("reason", "invalid categoryId");
            return map;
        }
        
        Long parent0Id = null;
        try {
            parent0Id = new Long((String)params.get("parent0Id"));
        } catch (Exception e) {
        }
        
        Long parent1Id = null;
        try {
            parent1Id = new Long((String)params.get("parent1Id"));
        } catch (Exception e) {
        }
        
        Long cstId = null;
        try {
            cstId = new Long((String)params.get("cstId"));
        } catch (Exception e) {
            map.put("reason", "invalid bctId");
            return map;
        }
        
        try {
            cstService.moveCategoryReference(cstId, parent0Id, parent1Id, categoryId);
            map.put("successful", true);
        } catch(Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
        }
        
        return map;
    }//moveCategory()
    
    
    /**
     * Edit the name of the specified category
     *
     * @param params A map contains:<br>
     *         <ul>
     *           <li>cstId - int, the current BCT instance id</li>
     *           <li>categoryId - int, id of the CategoryReference object</li>
     *           <li>name - the new category name</li>
     *         </ul>
     *         
     * @return A map contains:<br>
     *         <ul>
     *           <li>successful - a boolean value denoting if the operation succeeds</li>
     *           <li>reason - reason why operation failed (valid when successful==false)</li>
     *         </ul>
     */
    public Map editCategory(Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        try {
            Long cstId = new Long((String) params.get("cstId"));
            Long categoryId = new Long((String) params.get("categoryId"));
            String name = (String) params.get("name");
            
            if (name==null || "".equals(name.trim())) {
                map.put("reason", "can't create a category which name is empty.");
                return map;
            }
            
            cstService.editCategoryReference(cstId, categoryId, name);
            map.put("successful", true);
        } catch(Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//editCategory()
    
    
    /**
     * Delete the specified CategoryReference object in the given CST.
     *
     * @param params A map contains:<br>
     *         <ul>
     *           <li>cstId - int, the current CST instance id</li>
     *           <li>parentId - int, id of the parent CategoryReference object</li>
     *           <li>categoryId - int, id of the CategoryReference object</li>
     *         </ul>
     *         
     * @return A map contains:<br>
     *         <ul>
     *           <li>successful - a boolean value denoting if the operation succeeds</li>
     *           <li>reason - reason why operation failed (valid when successful==false)</li>
     *         </ul>
     */
    public Map deleteCategory(Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        try {
            Long cstId = new Long((String) params.get("cstId"));
            
            Long parentId = null;
            try {
                parentId = new Long((String)params.get("parentId"));
            } catch (Exception e) {
            }
            
            Long categoryId = new Long((String) params.get("categoryId"));
            
            cstService.deleteCategoryReference(cstId, parentId, categoryId);
            map.put("successful", true);
        } catch(Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
        }
        
        return map;
    }//deleteCategory()
    
    
    /**
     * Relate a TagReferrence to the give CategoryReference.
     *
     * @param params A map contains:<br>
     *         <ul>
     *           <li>bctId - int, the current BCT instance id</li>
     *           <li>categoryId - int, id of the CategoryReference object</li>
     *           <li>tagId - int, id of the TagReference object</li>
     *         </ul>
     *         
     * @return A map contains:<br>
     *         <ul>
     *           <li>successful - a boolean value denoting if the operation succeeds</li>
     *           <li>reason - reason why operation failed (valid when successful==false)</li>
     *         </ul>
     */
    public Map relateTag(Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        try {
            Long bctId = new Long((String) params.get("bctId"));
            Long categoryId = new Long((String) params.get("categoryId"));
            Long tagId = new Long((String) params.get("tagId"));
            
            cstService.relateTagToCategory(bctId, categoryId, tagId);
            map.put("successful", true);
        } catch(Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
        }
        
        return map;
    }//relateTag()
    
    
    /**
     * De-Relate a TagReferrence with the give CategoryReference.
     *
     * @param params A map contains:<br>
     *         <ul>
     *           <li>bctId - int, the current BCT instance id</li>
     *           <li>categoryId - int, id of the CategoryReference object</li>
     *           <li>tagId - int, id of the TagReference object</li>
     *         </ul>
     *         
     * @return A map contains:<br>
     *         <ul>
     *           <li>successful - a boolean value denoting if the operation succeeds</li>
     *           <li>reason - reason why operation failed (valid when successful==false)</li>
     *         </ul>
     */
    public Map derelateTag(Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        try {
            Long bctId = new Long((String) params.get("bctId"));
            Long categoryId = new Long((String) params.get("categoryId"));
            Long tagId = new Long((String) params.get("tagId"));
            
            cstService.deleteTagFromCategory(bctId, categoryId, tagId);
            map.put("successful", true);
        } catch(Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//derelateTag()
    
    
    /**
     * Get concerns related to a given tag.
     *
     * @param params A map contains:<br>
     *         <ul>
     *           <li>bctId - int, the current BCT instance id</li>
     *           <li>tagId - int, id of the TagReference object</li>
     *           <li>page - int, page of concerns to be displayed</li>
     *         </ul>
     *         
     * @return A map contains:<br>
     *         <ul>
     *           <li>successful - a boolean value denoting if the operation succeeds</li>
     *           <li>reason - reason why operation failed (valid when successful==false)</li>
     *           <li>html - a HTML source segment. (Generated by /WEB-INF/jsp/cvo/cstConcerns.jsp)<br>
     *                  The following variables are available for use in the jsp:
     *                  <ul>
     *                    <li>bct - the current BCT object</li>
     *                    <li>tag - the current TagReference object</li>
     *                    <li>concerns - A list of Concern objects</li>
     *                    <li>setting - A PageSetting object</li>
     *                  </ul>
     *           </li>
     *         </ul>
     */
    public Map getConcerns(HttpServletRequest request, Map params) {
        Map map = new HashMap();
        
        map.put("successful", false);
        try {
            Long bctId = new Long((String) params.get("bctId"));
            Long tagId = new Long((String) params.get("tagId"));
            
            int page = 1;
            try {
                String pageStr = (String) params.get("page");
                page = Integer.parseInt(pageStr);
            } catch(Exception e) {
            }
            
            PageSetting setting = new PageSetting(20);
            setting.setPage(page);
            
            Object[] values = cstService.getConcernsByTag(bctId, tagId, setting);
            
            request.setAttribute("bct", values[0]);
            request.setAttribute("tag", values[1]);
            request.setAttribute("concerns", values[2]);
            request.setAttribute("setting", setting);
            
            map.put("html", WebContextFactory.get().forwardToString("/WEB-INF/jsp/cvo/cstConcerns.jsp"));
            
            map.put("successful", true);
        } catch(Exception e) {
            e.printStackTrace();
            map.put("successful", false);
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//getConcerns()
    
    
    /**
     * Get concerns related to a set of given tags.
     *
     * @param params A map contains:<br>
     *         <ul>
     *           <li>bctId - int, the current BCT instance id</li>
     *           <li>page - int, page of concerns to be displayed. Optional, default is 1.</li>
     *           <li>count - int, page of concerns to be displayed. Optional, default is -1, means to get all.</li>
     *         </ul>
     * 
     * @param tags id list of TagReference objects
     * 
     * @return A map contains:<br>
     *         <ul>
     *           <li>successful - a boolean value denoting if the operation succeeds</li>
     *           <li>reason - reason why operation failed (valid when successful==false)</li>
     *           <li>html - a HTML source segment. (Generated by /WEB-INF/jsp/cvo/cstConcernsWithTags.jsp)<br>
     *                  The following variables are available for use in the jsp:
     *                  <ul>
     *                    <li>bct - the current BCT object</li>
     *                    <li>tags - a list of TagReference objects</li>
     *                    <li>concerns - A list of Concern objects</li>
     *                    <li>setting - A PageSetting objects</li>
     *                  </ul>
     *           </li>
     *         </ul>
     */
    public Map getConcernsByTags(HttpServletRequest request, Map params, int[] tags) {
        Map map = new HashMap();
        
        map.put("successful", false);
        try {
            Long bctId = new Long((String) params.get("bctId"));
            
            PageSetting setting = new PageSetting(20);
            setting.setPage((String) params.get("page"));
            setting.setRowOfPage((String) params.get("count"));
            
            Object[] values = cstService.getConcernsByTags(bctId, tags, setting);
            
            request.setAttribute("bct", values[0]);
            request.setAttribute("tags", values[1]);
            request.setAttribute("concerns", values[2]);
            request.setAttribute("setting", setting);
            
            map.put("html", WebContextFactory.get().forwardToString("/WEB-INF/jsp/cvo/cstConcerns.jsp"));
            
            map.put("successful", true);
        } catch(Exception e) {
            e.printStackTrace();
            map.put("successful", false);
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//getConcernsByTags()
    
    
    /**
     * 
     * @param params A map contains:<br>
     *         <ul>
     *           <li>catRefId - int, a CategoryReference instance id</li>
     *         </ul>
     *         
     * @return A map contains:<br>
     *         <ul>
     *           <li>successful - a boolean value denoting if the operation succeeds</li>
     *           <li>reason - reason why operation failed (valid when successful==false)</li>
     *           <li>summary - string</li>
     *         </ul>
     */
    public Map getSummary(HttpServletRequest request, Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        try {
            Long catRefId = new Long( (String) params.get("catRefId") );
            
            CategoryReference catRef = cstService.getCategoryReferenceById(catRefId);
            if (catRef==null) {
                map.put("reason", "CategoryReference doesn't exist.");
                return map;
            }
            
            map.put("summary", catRef.getTheme());
            
            map.put("successful", true);
        } catch(Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
        }
        
        return map;
    }//getSummary()
    
    
    /**
     * Save summary of a CategoryReference.
     *
     * @param params A map contains:<br>
     *         <ul>
     *           <li>catRefId - int, id of a CategoryReference object</li>
     *           <li>summary - string, summary to this CategoryReference</li>
     *         </ul>
     *         
     * @return A map contains:<br>
     *         <ul>
     *           <li>successful - a boolean value denoting if the operation succeeds</li>
     *           <li>reason - reason why operation failed (valid when successful==false)</li>
     *         </ul>
     */
    public Map saveSummary(Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        try {
            Long catRefId = new Long((String) params.get("catRefId"));
            String summary = (String) params.get("summary");
            if (summary==null) summary = "";
            
            cstService.saveSummary(catRefId, summary);
            
            map.put("successful", true);
        } catch(Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//saveSummary()
    
    
    /**
     * Get CST comments for the given CategoryReference id.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>catRefId - int, id of a CategoryReference object</li>
     *     <li>page - int, page number of the requestd page of comments</li>
     *   </ul>
     * 
     * @param wfinfo A map contains:
     *   <ul>
     *   <li>workflowId - long</li>
     *   <li>contextId - long</li>
     *   <li>activityId - long</li>
     * </ul>
     * 
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *     <li>html - a HTML source segment. (Generated by /WEB-INF/jsp/sarp/cst/cstComments.jsp)<br>
     *           The following variables are available for use in the jsp:
     *           <ul>
     *             <li>comments - A list of Comment objects</li>
     *             <li>setting - A PageSetting objects</li>
     *           </ul>
     *     </li>
     *     <li>page - page number of the returned page</li>
     *   </ul>
     */
    public Map getComments(HttpServletRequest request, Map params, Map wfinfo) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long catRefId = null;
        try {
            request.setAttribute("wfinfo", wfinfo);
            
            catRefId = new Long((String) params.get("catRefId"));
            if (catRefId==null) {
                map.put("reason", "can't find this CategoryReference");
                return map;
            }
        } catch (Exception e) {
            map.put("reason", "can't find this CategoryReference");
            return map;
        }
        
        try {
            PageSetting setting = new PageSetting(10);
            setting.setPage((String) params.get("page"));
            
            Collection<CSTComment> comments = cstService.getComments(catRefId, setting);
            
            request.setAttribute("comments", comments);
            request.setAttribute("setting", setting);
            
            map.put("html", WebContextFactory.get().forwardToString("/WEB-INF/jsp/sarp/cst/cstComments.jsp"));
            map.put("page", setting.getPage());
            map.put("successful", true);
            
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//getComments()
    
    
    /**
     * Create a CST comment for the given CategoryReference id.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>catRefId - int, id of a CategoryReference object</li>
     *     <li>title - string, comment title</li>
     *     <li>content - string, comment content</li>
     *   </ul>
     * 
     * @param wfinfo A map contains:
     *   <ul>
     *   <li>workflowId - long</li>
     *   <li>contextId - long</li>
     *   <li>activityId - long</li>
     * </ul>
     * 
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *   </ul>
     */
    public Map createComment(HttpServletRequest request, Map params, Map wfinfo) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long catRefId = null;
        try {
            request.setAttribute("wfinfo", wfinfo);
            
            catRefId = new Long((String) params.get("catRefId"));
            if (catRefId==null) {
                map.put("reason", "can't find this CategoryReference");
                return map;
            }
        } catch (Exception e) {
            map.put("reason", "can't find this CategoryReference");
            return map;
        }
        
        try {
            String title = (String) params.get("title");
            String content = (String) params.get("content");
            
            if (title.length()>100) throw new Exception("title can't exceeds 100 chars");
            if (content.length()>8192) throw new Exception("content can't exceeds 8192 chars");
            
            String workflowId = (String) wfinfo.get("workflowId");
            String contextId = (String) wfinfo.get("contextId");
            String activityId = (String) wfinfo.get("activityId");
            
            CSTComment comment = cstService.createComment(new Long((String) wfinfo.get("workflowId")), catRefId, title, content, false);
            
            if (comment!=null) {
                // sending email
                try {
                    Set<User> recipients = cstService.getThreadUsers(catRefId);
                    String url = "workflow.do?workflowId="+workflowId+"&contextId="+contextId+"&activityId="+activityId;
                    
                    String type = "\"Concern category tool\" in step \"Create Climate Concern Categories\"";
                    
                    Map<String, Object> vars = new HashMap<String, Object>();
                    vars.put("type", type);
                    vars.put("url", url);
                    
                    emailSender.send(recipients, "generic_comment", vars, WebUtils.currentUserId());
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            
            map.put("successful", true);
            
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//createComment()
    
    
    /**
     * Delete the given Comment object. Only used by moderator.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>cid - int, id of the Comment object</li>
     *   </ul>
     *   
     * @param wfinfo A map contains:
     *   <ul>
     *   <li>workflowId - long</li>
     *   <li>contextId - long</li>
     *   <li>activityId - long</li>
     * </ul>
     * 
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *   </ul>
     */
    public Map deleteComment(Map params, Map wfinfo) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long cid = null;
        CSTComment comment = null;
        
        try {
            cid = new Long((String) params.get("cid"));
            if (cid==null) {
                map.put("reason", "no such Comment object");
                return map;
            }
            
            comment = cstService.getCommentById(cid);
            if (comment==null) {
                map.put("reason", "no such Comment object");
                return map;
            }
            
            //check if it's moderator, TODO
            if (comment.getAuthor().getId().equals(WebUtils.currentUserId())) {
                cstService.deleteComment(comment);
                
                /*
                 * delete from lucene
                 */
                IndexSearcher searcher = null;
                IndexReader reader = null;
                try {
                    searcher = searchHelper.getIndexSearcher();
                    
                    Hits hits = searcher.search(searchHelper.getParser().parse(
                        "workflowid:"+wfinfo.get("workflowId")
                       +" AND type:infoobjcomment AND commentid:"+cid
                    ));
                    
                    if (hits.length()>0) {
                        reader = searchHelper.getIndexReader();
                        reader.deleteDocument(hits.id(0));
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    if (searcher!=null) searcher.close();
                    if (reader!=null) reader.close();
                }
            } else {
                map.put("reason", "You are not the owner of this comment");
                return map;
            }
            
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//deleteComment()
    
    
    /**
     * Set the voting choice on the given CSTComment.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>cid - int, id of the CSTComment object. Required.</li>
     *     <li>agree - string, "true" or "false". Whether or not the current user agree with the current object.</li>
     *   </ul>
     *   
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *     <li>numAgree - int</li>
     *     <li>numVote - int</li>
     *   </ul>
     */
    public Map setVotingOnComment(Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long cid = null;
        try {
            cid = new Long((String) params.get("cid"));
        } catch (Exception e) {
            map.put("reason", "catRefId is required.");
            return map;
        }
        
        boolean agree = "true".equalsIgnoreCase((String) params.get("agree"));
        
        try {
            CSTComment comment = null;
            
            YesNoVoting voting = systemService.getVoting(YesNoVoting.TYPE_SARP_CST_COMMENT, cid);
            if (voting!=null) {
                comment = cstService.getCommentById(cid);
            } else {
                comment = cstService.setVotingOnComment(cid, agree);
            }
            
            map.put("numAgree", comment.getNumAgree());
            map.put("numVote", comment.getNumVote());
            map.put("voted", true);
            
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//setVotingOnComment()
    
    
    /**
     * Publish my CST category.
     * 
     * @param params A map contains:
     *   <ul>
     *     <li>cstId - int, id of the CST object. Required.</li>
     *   </ul>
     *   
     * @return A map contains:<br>
     *   <ul>
     *     <li>successful - a boolean value denoting if the operation succeeds</li>
     *     <li>reason - reason why operation failed (valid when successful==false)</li>
     *     <li>numAgree - int</li>
     *     <li>numVote - int</li>
     *   </ul>
     */
    public Map publish(Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        Long cstId = null;
        try {
            cstId = new Long((String) params.get("cstId"));
        } catch (Exception e) {
            map.put("reason", "cstId is required.");
            return map;
        }
        
        try {
            cstService.publish(cstId);
            map.put("successful", true);
        } catch (Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
            return map;
        }
        
        return map;
    }//publish()
    
    
    /**
     * 
     * @param params A map contains:<br>
     *         <ul>
     *           <li>cstId - int, a CST instance id</li>
     *         </ul>
     *         
     * @return A map contains:<br>
     *         <ul>
     *           <li>successful - a boolean value denoting if the operation succeeds</li>
     *           <li>reason - reason why operation failed (valid when successful==false)</li>
     *           <li>winnerUser - the User object</li>
     *           <li>winnerCategory - the CategoryReference</li>
     *         </ul>
     */
    public Map getWinner(HttpServletRequest request, Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        try {
            Long cstId = new Long( (String) params.get("cstId") );
            
            CST cst = cstService.getCSTById(cstId);
            
            map.put("winnerUser", cst.getWinner());
            map.put("winnerCategory", cst.getWinnerCategory());
            
            map.put("successful", true);
        } catch(Exception e) {
            e.printStackTrace();
            map.put("reason", e.getMessage());
        }
        
        return map;
    }//getWinner()
    
    
}//class CSTAgent
