package org.pgist.glossary;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.pgist.util.PageSetting;

import uk.ltd.getahead.dwr.WebContextFactory;


/**
 * DWR AJAX Agent class.<br>
 * Provide AJAX services to client programs.<br>
 * In this document, all the NON-AJAX methods are marked out. So all methods
 * <span style="color:red;">without</span> such a description
 * <span style="color:red;">ARE</span> AJAX service methods.<br>
 * 
 * @author kenny
 *
 */
public class GlossaryManageAgent {

    
    private GlossaryService glossaryService;
    
    
    public void setGlossaryService(GlossaryService glossaryService) {
        this.glossaryService = glossaryService;
    }
    
    
    /*
     * ------------------------------------------------------------------------
     */
    
    
    /**
     * Get glossary terms with the given filter and sorting conditions.
     * 
     * @param params - A map contains:<br>
     *         <ul>
     *           <li>filter - string</li>
     *           <li>sort - string, ['name' | 'views' | 'comments', 'createtime'], optional, default is 'name'</li>
     *           <li>direction - string, ['asc' | 'desc'], optional, default is 'asc'</li>
     *         </ul>
     * @return A map contains:<br>
     *         <ul>
     *           <li>successful - a boolean value denoting if the operation succeeds</li>
     *           <li>reason - reason why operation failed (valid when successful==false)</li>
     *           <li>html - a HTML source segment. (if sorting by name, it's generated by /WEB-INF/jsp/glossary/gmTermsAlpha.jsp; 
     *           else it's generated by /WEB-INF/jsp/glossary/gmTerms.jsp)<br>
     *                  The following variables are available for use in the jsp:
     *                  <ul>
     *                    <li>terms - A list of Term objects</li>
     *                    <li>filter - string</li>
     *                    <li>sort - string, ['name' | 'views' | 'comments', 'createtime']</li>
     *                    <li>direction - string, ['asc' | 'desc']</li>
     *                  </ul>
     *           </li>
     *         </ul>
     */
    public Map getTerms(HttpServletRequest request, Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        try {
            String filter = (String) params.get("filter");
            if (filter==null) filter = "";
            
            String sort = (String) params.get("sort");
            if (sort==null) sort = "name";
            
            String direction = (String) params.get("direction");
            if (direction==null) direction = "asc";
            
            Collection terms = glossaryService.getTerms(filter, sort, direction, new int[] {Term.STATUS_OFFICIAL});
            
            char ch = 0;
            List initials = new ArrayList(27);
            for (Term term : (Collection<Term>) terms) {
                if (ch!=term.getInitial()) {
                    ch = term.getInitial();
                    initials.add(new Character(ch));
                }
            }
            
            request.setAttribute("filter", filter);
            request.setAttribute("sort", sort);
            request.setAttribute("direction", direction);
            request.setAttribute("terms", terms);
            request.setAttribute("initials", initials);
            
            if (sort==null || "".equals(sort) || "name".equalsIgnoreCase(sort)) {
                map.put("html", WebContextFactory.get().forwardToString("/WEB-INF/jsp/glossary/gmTermsAlpha.jsp"));
            } else {
                map.put("html", WebContextFactory.get().forwardToString("/WEB-INF/jsp/glossary/gmTerms.jsp"));
            }
            
            map.put("successful", true);
        } catch (Exception e) {
            map.put("reason", e.getMessage());
        }
        
        return map;
    }//getTerms()
    
    
    /**
     * Get term object with the given termId.
     * 
     * @param params - A map contains:<br>
     *         <ul>
     *           <li>id - int, id of term object</li>
     *           <li>type - string, 'view' | 'edit'</li>
     *         </ul>
     * @return A map contains:<br>
     *         <ul>
     *           <li>successful - a boolean value denoting if the operation succeeds</li>
     *           <li>reason - reason why operation failed (valid when successful==false)</li>
     *           <li>html - a HTML source segment.
     *                  if type=='view', generated by /WEB-INF/jsp/glossary/viewTerm.jsp<br>
     *                  else if type=='edit', generated by /WEB-INF/jsp/glossary/editTerm.jsp<br>
     *                  The following variables are available for use in the jsp:
     *                  <ul>
     *                    <li>term - A Term object</li>
     *                  </ul>
     *           </li>
     *         </ul>
     */
    public Map getTerm(HttpServletRequest request, Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        try {
            Long id = new Long((String) params.get("id"));
            String type = (String) params.get("type");
            
            Term term = glossaryService.getTermById(id);
            if (term==null) {
                map.put("reason", "term with id "+id+" is not found!");
                return map;
            }
            
            request.setAttribute("term", term);
            
            if ("view".equals(type)) {
                map.put("html", WebContextFactory.get().forwardToString("/WEB-INF/jsp/glossary/gmViewTerm.jsp"));
            } else if ("edit".equals(type)) {
                map.put("html", WebContextFactory.get().forwardToString("/WEB-INF/jsp/glossary/gmEditTerm.jsp"));
            } else {
                map.put("reason", "type must be either 'view' or 'edit'");
                return map;
            }
            
            map.put("successful", true);
        } catch (Exception e) {
            map.put("reason", e.getMessage());
        }
        
        return map;
    }//getTerm()
    
    
    /**
     * Save the given term object.
     * 
     * @param params - A map contains:<br>
     *         <ul>
     *           <li>id - int, id of term object, -1 denotes to create a new term, else modify an existing term</li>
     *           <li>name - string, the name of term</li>
     *           <li>shortDefinition - string, the short definition of term</li>
     *           <li>extDefinition - string, the extended definition of term</li>
     *         </ul>
     * @param relatedTerms - array of string, array of related terms
     * @param links - array of string, array of term links
     * @param sources - array of string, array of term sources
     * @param categories - array of string, array of term categories
     * @return A map contains:<br>
     *         <ul>
     *           <li>successful - a boolean value denoting if the operation succeeds</li>
     *           <li>reason - reason why operation failed (valid when successful==false)</li>
     *         </ul>
     */
    public Map saveTerm(Map params, String[] relatedTerms, String[] links, String[] sources, String[] categories) {
        Map map = new HashMap();
        map.put("successful", false);
        
        try {
            Term term;
            Long id = new Long((String) params.get("id"));
            if (id==-1) {
                term = new Term();
                term.setRefCount(0);
                term.setHitCount(0);
                term.setCommentCount(0);
            } else {
                term = glossaryService.getTermById(id);
                if (term==null) {
                    map.put("reason", "term with id "+id+" is not found!");
                    return map;
                }
            }
            
            String name = (String) params.get("name");
            if (name==null || "".equals(name)) {
                map.put("reason", "name is required for term");
                return map;
            }
            term.setName(name);
            
            String shortDefinition = (String) params.get("shortDefinition");
            term.setShortDefinition(shortDefinition);
            
            String extDefinition = (String) params.get("extDefinition");
            term.setExtDefinition(extDefinition);
            
            if (id==-1) {
                glossaryService.createTerm(term, relatedTerms, links, sources, categories, Term.STATUS_OFFICIAL);
            } else {
                glossaryService.updateTerm(term, relatedTerms, links, sources, categories);
            }
            
            map.put("successful", true);
        } catch (Exception e) {
            map.put("reason", e.getMessage());
        }
        
        return map;
    }//saveTerm()
    
    
    public Map deleteTerm(Map params) {
        Map map = new HashMap();
        map.put("successful", false);
        
        try {
            Long id = new Long((String) params.get("id"));
            
            Term term = glossaryService.getTermById(id);
            if (term==null) {
                map.put("reason", "term with id "+id+" is not found!");
                return map;
            }
            
            term.setDeleted(true);
            
            map.put("successful", true);
        } catch (Exception e) {
            map.put("reason", e.getMessage());
        }
        
        return map;
    }//deleteTerm()
    
    
}//class GlossaryManageAgent
