/*
 * Fitness function for selecting funding sources.
**/

import org.pgist.packages.knapsack.GAKnapsackCalculator;
import org.pgist.packages.knapsack.GAKnapsackFitnessProxy;

evolutionTimes = 50;
populationSize = 100;

fitnessFunction = new GAKnapsackFitnessProxy() {
    
    protected GAKnapsackCalculator calculator;
    
    /*
     * Calculator.
    **/
    public void setCalculator(GAKnapsackCalculator calculator1) {
        calculator = calculator1;
    }
    
    /*
     * -----------------------------------------------------------
    **/
    
 
    double benefitBonus(double limit, double totalBenefit) {
        return Math.min(GAKnapsackCalculator.MAX_BOUND*1/4, totalBenefit/10000000);
     }//benefitBonus()
    
  
    double totalCostDiffBonus(double limit, double totalCostDiff) {
        if(limit < 50){
            return GAKnapsackCalculator.MAX_BOUND*3/4 - (GAKnapsackCalculator.MAX_BOUND/10000 * totalCostDiff * totalCostDiff);
        }else if(limit < 100){
            return GAKnapsackCalculator.MAX_BOUND*3/4 - (GAKnapsackCalculator.MAX_BOUND/100000 * totalCostDiff * totalCostDiff);
        }else if(limit < 500){
            return GAKnapsackCalculator.MAX_BOUND*3/4 - (GAKnapsackCalculator.MAX_BOUND/1000000 * totalCostDiff * totalCostDiff);
        }else if(limit < 1000){
            return GAKnapsackCalculator.MAX_BOUND*3/4 - (GAKnapsackCalculator.MAX_BOUND/10000000 * totalCostDiff * totalCostDiff);
        }else if(limit < 2000){
            return GAKnapsackCalculator.MAX_BOUND*3/4 - (GAKnapsackCalculator.MAX_BOUND/100000000 * totalCostDiff * totalCostDiff);
        }else{
            return GAKnapsackCalculator.MAX_BOUND*3/4 - (GAKnapsackCalculator.MAX_BOUND/1000000000 * totalCostDiff * totalCostDiff);
        }
      }//totalCostDiffBonus()
    
   double costDifferencePenalty(double costDifference) {
        if (costDifference < -.9) {
            return -GAKnapsackCalculator.MAX_BOUND;
        }else{
            return 0;
        }
    }//costDifferencePenalty()
    
    
    /*
     * -----------------------------------------------------------
    **/
    
    public double evaluate(chromosome) {
        totalCost = calculator.getTotalCost(chromosome);
        limit = calculator.limit;
        costDifference = limit - totalCost;
        costToAvgRes = calculator.getCostToAvgRes(chromosome);
        totalBenefit = calculator.getTotalBenefit(chromosome);
        costToAvgResDiff = limit - costToAvgRes;
        if(costToAvgResDiff < 0){
            totalCostDiff = 2 * costDifference - costToAvgResDiff;
        }else{totalCostDiff = 2 * costDifference + costToAvgResDiff;
        }

        
        fitness = 0.0d;
        fitness += benefitBonus(limit, totalBenefit);
        fitness += totalCostDiffBonus(limit, totalCostDiff);
        fitness += costDifferencePenalty(costDifference);
                
        return Math.max(1.0d, fitness);
    }//evaluate()
    
};//class GAKnapsackFitnessProxy
